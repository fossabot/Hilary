/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var DisableUsersMigration = require('../../../etc/migration/disable_users_from_tenancy/lib/disable-users-by-tenancy');
var FollowingTestUtil = require('oae-following/lib/test/util');
var Redis = require('oae-util/lib/redis');
var RestAPI = require('oae-rest');
var SearchTestUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

var PrincipalsDelete = require('oae-principals/lib/delete');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');

var DiscussionsTestUtil = require('oae-discussions/lib/test/util');
var ContentTestUtil = require('oae-content/lib/test/util');
var FoldersTestUtil = require('oae-folders/lib/test/util');

describe('Delete user', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var camAnonymousRestContext = null;
    var gtAdminRestContext = null;
    var gtAnonymousRestContext = null;

    /*
     * Set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);   
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();     
        return callback();
    });

    describe('Delete user - step 1', function() {

        /**
         * Test that verifies definitive delation remove user links and resources roles
         */
        it('verify remove user - promote users role on links', function(callback) {
           // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate links
                PrincipalsTestUtil.generateLinks(userToDelete.restContext, 'private', 3,  function(err, links) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateLinks(user.restContext, 'private', 1,  function(err, link) {
                        assert.ok(!err);
                        // Generate rights links
                        PrincipalsTestUtil.generateRightContent(userToDelete, user, 'manager', links[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightContent(userToDelete, user, 'viewer', links[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightContent(user, userToDelete, 'viewer', link[0], function(err) {
                                    assert.ok(!err); 
                                    // TODO : find another solution
                                    camAdminRestContext.user = function () { return userToDelete.user; };
                                    camAdminRestContext.tenant = function () { return userToDelete.user.tenant; };
                                    userArchive.idArchive = userArchive.user.id;

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, links[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.idArchive, links[0].id, function(err, hasRole) {
                                                //assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, links[0].id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, links[1].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.idArchive, links[1].id, function(err, hasRole) {
                                                            assert.equal(hasRole, true);
                                                            AuthzAPI.hasRole(user.user.id, links[1].id, 'viewer', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, links[2].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.idArchive, links[2].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasRole(user.user.id, link[0].id, 'manager', function(err, hasRole) {
                                                                            assert.equal(hasRole, true);
                                                                            AuthzAPI.hasAnyRole(userToDelete.user.id, link[0].id, function(err, hasRole) {
                                                                                assert.equal(hasRole, false);
                                                                                AuthzAPI.hasAnyRole(userArchive.idArchive, link[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    return callback();
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user files and resources roles
         */
        it('verify remove user - promote users role on files', function(callback) {
           // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate files
                PrincipalsTestUtil.generateFiles(userToDelete.restContext, 'private', 3,  function(err, files) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateFiles(user.restContext, 'private', 1,  function(err, file) {
                        assert.ok(!err);
                        // Generate rights files
                        PrincipalsTestUtil.generateRightContent(userToDelete, user, 'manager', files[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightContent(userToDelete, user, 'viewer', files[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightContent(user, userToDelete, 'viewer', file[0], function(err) {
                                    assert.ok(!err); 
                                    // TODO : find another solution
                                    camAdminRestContext.user = function () { return userToDelete.user; };
                                    camAdminRestContext.tenant = function () { return userToDelete.user.tenant; };
                                    userArchive.idArchive = userArchive.user.id;

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, files[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.idArchive, files[0].id, function(err, hasRole) {
                                                //assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, files[0].id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, files[1].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.idArchive, files[1].id, function(err, hasRole) {
                                                            assert.equal(hasRole, true);
                                                            AuthzAPI.hasRole(user.user.id, files[1].id, 'viewer', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, files[2].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.idArchive, files[2].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasAnyRole(user.user.id, files[2].id, function(err, hasRole) {
                                                                            assert.equal(hasRole, false);
                                                                            AuthzAPI.hasRole(user.user.id, file[0].id, 'manager', function(err, hasRole) {
                                                                                assert.equal(hasRole, true);
                                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, file[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    AuthzAPI.hasAnyRole(userArchive.idArchive, file[0].id, function(err, hasRole) {
                                                                                        assert.equal(hasRole, false);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user meetings and resources roles
         */
        it('verify remove user - promote users role on meetings', function(callback) {
           // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate meetings
                PrincipalsTestUtil.generateMeetings(userToDelete.restContext, userToDelete.user, 'private', 3, function(err, meetings) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateMeetings(user.restContext, user.user, 'private', 1, function(err, meeting) {
                        assert.ok(!err);
                        // Generate rights meetings
                        PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, userToDelete, user, 'manager', meetings[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, userToDelete, user, 'member', meetings[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, user, userToDelete, 'member', meeting[0], function(err) {
                                    assert.ok(!err); 
                                    // TODO : find another solution
                                    camAdminRestContext.user = function () { return userToDelete.user; };
                                    camAdminRestContext.tenant = function () { return userToDelete.user.tenant; };
                                    userArchive.idArchive = userArchive.user.id;

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, meetings[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.idArchive, meetings[0].id, function(err, hasRole) {
                                                //assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, meetings[0].id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, meetings[1].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.idArchive, meetings[1].id, function(err, hasRole) {
                                                            assert.equal(hasRole, false);
                                                            AuthzAPI.hasRole(user.user.id, meetings[1].id, 'manager', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, meetings[2].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.idArchive, meetings[2].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasAnyRole(user.user.id, meetings[2].id, function(err, hasRole) {
                                                                            assert.equal(hasRole, false);
                                                                            AuthzAPI.hasRole(user.user.id, meeting[0].id, 'manager', function(err, hasRole) {
                                                                                assert.equal(hasRole, true);
                                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, meeting[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    AuthzAPI.hasAnyRole(userArchive.idArchive, meeting[0].id, function(err, hasRole) {
                                                                                        assert.equal(hasRole, false);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user discussions and resources roles
         */
        it('verify remove user - promote users role on discussions', function(callback) {
           // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate discussions
                PrincipalsTestUtil.generateDiscussions(userToDelete.restContext, 'private', 3,  function(err, discussions) {
                    assert.ok(!err);  
                   PrincipalsTestUtil.generateDiscussions(user.restContext, 'private', 1,  function(err, discussion) {
                        assert.ok(!err);
                        // Generate rights discussions
                        PrincipalsTestUtil.generateRightDiscussion(userToDelete, user, 'manager', discussions[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightDiscussion(userToDelete, user, 'member', discussions[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightDiscussion(user, userToDelete, 'member', discussion[0], function(err) {
                                    assert.ok(!err); 
                                    // TODO : find another solution
                                    camAdminRestContext.user = function () { return userToDelete.user; };
                                    camAdminRestContext.tenant = function () { return userToDelete.user.tenant; };
                                    userArchive.idArchive = userArchive.user.id;

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, discussions[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.idArchive, discussions[0].id, function(err, hasRole) {
                                                //assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, discussions[0].id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, discussions[1].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.idArchive, discussions[1].id, function(err, hasRole) {
                                                            assert.equal(hasRole, false);
                                                            AuthzAPI.hasRole(user.user.id, discussions[1].id, 'manager', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, discussions[2].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.idArchive, discussions[2].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasAnyRole(user.user.id, discussions[2].id, function(err, hasRole) {
                                                                            assert.equal(hasRole, false);
                                                                            AuthzAPI.hasRole(user.user.id, discussion[0].id, 'manager', function(err, hasRole) {
                                                                                assert.equal(hasRole, true);
                                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, discussion[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    AuthzAPI.hasAnyRole(userArchive.idArchive, discussion[0].id, function(err, hasRole) {
                                                                                        assert.equal(hasRole, false);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user groups and resources roles
         */
        it('verify remove user - promote users role on groups', function(callback) {
           // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate groups
                PrincipalsTestUtil.generateGroups(userToDelete.restContext, 'private', 3,  function(err, groups) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateGroups(user.restContext, 'private', 1,  function(err, group) {
                        assert.ok(!err);
                        // Generate rights groups
                        PrincipalsTestUtil.generateRightGroup(userToDelete, user, 'manager', groups[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightGroup(userToDelete, user, 'member', groups[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightGroup(user, userToDelete, 'member', group[0], function(err) {
                                    assert.ok(!err); 
                                    // TODO : find another solution
                                    camAdminRestContext.user = function () { return userToDelete.user; };
                                    camAdminRestContext.tenant = function () { return userToDelete.user.tenant; };
                                    userArchive.idArchive = userArchive.user.id;

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, groups[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.idArchive, groups[0].id, function(err, hasRole) {
                                                assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, groups[0].id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, groups[1].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.idArchive, groups[1].id, function(err, hasRole) {
                                                            assert.equal(hasRole, false);
                                                            AuthzAPI.hasRole(user.user.id, groups[1].id, 'manager', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, groups[2].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.idArchive, groups[2].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasRole(user.user.id, group[0].id, 'manager', function(err, hasRole) {
                                                                            assert.equal(hasRole, true);
                                                                            AuthzAPI.hasAnyRole(userToDelete.user.id, group[0].id, function(err, hasRole) {
                                                                                assert.equal(hasRole, false);
                                                                                AuthzAPI.hasAnyRole(userArchive.idArchive, group[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    return callback();
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user folders and resources roles
         */
        /*it('verify remove user - promote users role on folders', function(callback) {
           // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate folders
                FoldersTestUtil.generateTestFolders(userToDelete.restContext, 3, function(folder0, folder1, folder2) {
                    FoldersTestUtil.generateTestFolders(user.restContext, 1, function(folder) {
                        assert.ok(!err);
                        // Generate rights folders
                        PrincipalsTestUtil.generateRightFolder(userToDelete, user, 'manager', folder0, function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightFolder(userToDelete, user, 'viewer', folder1, function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightFolder(user, userToDelete, 'viewer', folder, function(err) {
                                    assert.ok(!err); 
                                    // TODO : find another solution
                                    camAdminRestContext.user = function () { return userToDelete.user; };
                                    camAdminRestContext.tenant = function () { return userToDelete.user.tenant; };
                                    userArchive.idArchive = userArchive.user.id;
                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, folder0.id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.idArchive, folder0.id, function(err, hasRole) {
                                                assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, folder0.id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, folder1.id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.idArchive, folder1.id, function(err, hasRole) {
                                                            assert.equal(hasRole, false);
                                                            AuthzAPI.hasRole(user.user.id, folder1.id, 'manager', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, folder2.id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.idArchive, folder2.id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasRole(user.user.id, folder.id, 'manager', function(err, hasRole) {
                                                                            assert.equal(hasRole, true);
                                                                            AuthzAPI.hasAnyRole(userToDelete.user.id, folder.id, function(err, hasRole) {
                                                                                assert.equal(hasRole, false);
                                                                                AuthzAPI.hasAnyRole(userArchive.idArchive, folder.id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    return callback();
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
       });
*/

     });
});
