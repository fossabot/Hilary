/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the 'License'); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an 'AS IS'
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var AuthzAPI = require('oae-authz');
var AuthzDeleteAPI = require('oae-authz/lib/delete');
var AuthzUtil = require('oae-authz/lib/util');
var ContentAPI = require('oae-content');
var ContentTestUtil = require('oae-content/lib/test/util');
var ContentUtil = require('oae-content/lib/internal/util');
var DiscussionsTestUtil = require('oae-discussions/lib/test/util');
var FoldersTestUtil = require('oae-folders/lib/test/util');
var FollowingTestsUtil = require('oae-following/lib/test/util');
var MeetingAPI = require('oae-jitsi/lib/api.meetings');
var PrincipalsAPI = require('oae-principals');
var RestAPI = require('oae-rest');
var SearchTestUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

var PrincipalsDelete = require('oae-principals/lib/delete');
var PrincipalsDefinitiveDeletionAPI = require('oae-principals/lib/definitiveDeletion');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');


describe('Delete user', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var camAnonymousRestContext = null;
    var gtAdminRestContext = null;
    var gtAnonymousRestContext = null;

    /**
     * @return {Stream} A stream to jpg image
     * @api private
     */
    var _getPictureStream = function() {
        return fs.createReadStream(util.format('%s/data/restroom.jpg', __dirname));
    };

    /*
     * Set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);   
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();     
        return callback();
    });

    describe('Delete user - Principals', function() {

        /**
         * Test that verifies user deleted from data base
         */
        it('Verify remove user - Step 1 - User still alive && marked like removed', function(callback) {
           
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // TODO : find another solution
                camAdminRestContext.user = function () { return userArchive.user; };
                camAdminRestContext.tenant = function () { return userArchive.user.tenant; };
                camAdminRestContext.user().isAdmin = function () { return true; };
                camAdminRestContext.locale = function () { return 'en_GB'; };

                // Delete User - step 1
                PrincipalsAPI.deleteUser(camAdminRestContext, userToDelete.user.id, function(err) {
                //PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                    assert.ok(!err); 

                    // Get user
                    PrincipalsDAO.getPrincipalFromCassandra(userToDelete.user.id, function(err, user) {
                        assert.ok(!err);
                        assert.ok(user);

                        // Marked as deleted
                        AuthzDeleteAPI.isDeleted([userToDelete.user.id], function(err, wasDeleted) {
                            assert.ok(!err);
                            var isDeleted = Object.keys(wasDeleted).map((k) => wasDeleted[k]);
                            assert.equal(Object.keys(wasDeleted)[0], userToDelete.user.id);
                            assert.equal(isDeleted[0], true);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies user deleted from data base
         */
        it('Verify remove user - Step 2 - If user is removed from data base', function(callback) {
           
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, userToDelete, userArchive) {
                assert.ok(!err);

                // TODO : find another solution
                camAdminRestContext.user = function () { return userArchive.user; };
                camAdminRestContext.tenant = function () { return userArchive.user.tenant; };
                camAdminRestContext.user().isAdmin = function () { return true; };
                camAdminRestContext.locale = function () { return 'en_GB'; };

                // Delete User - step 1
                PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                    assert.ok(!err); 
                    assert.ok(resUserArchive); 

                    // Delete User - step 2
                    PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                        assert.ok(!err); 

                        // Get principals
                        PrincipalsDAO.getPrincipalFromCassandra(userToDelete.user.id, function(err, user) {
                            assert.ok(err);
                            assert.ok(!user);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies user profile picture is deleted from file system
         */
        it('Verify remove user - Step 2 - If profile picture is removed form file system', function(callback) {
           
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, userToDelete, userArchive) {
                assert.ok(!err);

                // TODO : find another solution
                camAdminRestContext.user = function () { return userArchive.user; };
                camAdminRestContext.tenant = function () { return userArchive.user.tenant; };
                camAdminRestContext.user().isAdmin = function () { return true; };
                camAdminRestContext.locale = function () { return 'en_GB'; };

                // Upload a profile picture for the user so we can verify its data on the user profile model
                PrincipalsTestUtil.uploadAndCropPicture(userToDelete.restContext, userToDelete.user.id, _getPictureStream, {'x': 10, 'y': 10, 'width': 200}, function() {
                    
                    // Get the user
                    PrincipalsDAO.getPrincipal(userToDelete.user.id, function (err, retrievedUser) {
                        assert.ok(!err);

                        // Delete User - step 1
                        PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                            assert.ok(!err); 
                            assert.ok(resUserArchive); 

                            // Delete User - step 2
                            PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                                
                                // Get files
                                var pathSmallPicture = retrievedUser.picture.smallUri.split(':');
                                var pathMediumPicture = retrievedUser.picture.mediumUri.split(':');
                                var pathLargePicture = retrievedUser.picture.largeUri.split(':');

                                var path = ContentUtil.getStorageBackend(camAdminRestContext, retrievedUser.picture.largeUri).getRootDirectory();

                                // TODO : get files path    
                                fs.readFile(path + '/' + pathSmallPicture[1], function (err, data) {
                                    assert.ok(err);
                                    assert.ok(!data);
                                    fs.readFile(path + '/' + pathMediumPicture[1], function (err, data) {
                                        assert.ok(err);
                                        assert.ok(!data);
                                        fs.readFile(path + '/' + pathLargePicture[1], function (err, data) {
                                            assert.ok(err);
                                            assert.ok(!data);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });

    describe('Delete user - step 1', function() {

        /**
         * Test that verifies deleting and restoring a user removes and restores them in followers
         * lists
         */
        it('Verify remove user - remove followers', function(callback) {
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, userArchive) {
                assert.ok(!err);

                // Create 2 users, one following the other
                FollowingTestsUtil.createFollowerAndFollowed(camAdminRestContext, function(follower, followed) {

                    // Ensure the follower and following feeds indicate they are indeed following
                    FollowingTestsUtil.assertFollows(follower.user.id, follower.restContext, followed.user.id, followed.restContext, function() {
                        
                        // Delete user
                        PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, followed, userArchive, function(err, userArchive) { 
                            assert.ok(!err); 
                            assert.ok(userArchive);

                            // Ensure the follower and following feeds indicate they are no longer following
                            FollowingTestsUtil.assertDoesNotFollow(follower.user.id, follower.restContext, followed.user.id, followed.restContext, callback);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies deleting and restoring a user removes and restores them in followers
         * lists
         */
        it('Verify remove user - remove following', function(callback) {
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, userArchive) {
                assert.ok(!err);

                // Create 2 users, one following the other
                FollowingTestsUtil.createFollowerAndFollowed(camAdminRestContext, function(follower, followed) {
  
                    // Ensure the follower and following feeds indicate they are indeed following
                    FollowingTestsUtil.assertFollows(follower.user.id, follower.restContext, followed.user.id, followed.restContext, function() {

                        // Delete user
                        PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, follower, userArchive, function(err, userArchive) { 
                            assert.ok(!err); 
                            assert.ok(userArchive);

                            // Ensure the follower and following feeds indicate they are no longer following
                            FollowingTestsUtil.assertDoesNotFollow(follower.user.id, follower.restContext, followed.user.id, followed.restContext, callback);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user links and resources roles
         */
        it('Verify remove user - Promote users role on links', function(callback) {
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate links
                PrincipalsTestUtil.generateLinks(userToDelete.restContext, 'private', 3,  function(err, links) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateLinks(user.restContext, 'private', 1,  function(err, link) {
                        assert.ok(!err);

                        // Generate rights links
                        PrincipalsTestUtil.generateRightContent(userToDelete, user, 'manager', links[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightContent(userToDelete, user, 'viewer', links[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightContent(user, userToDelete, 'viewer', link[0], function(err) {
                                    assert.ok(!err); 

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 

                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, links[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.archiveId, links[0].id, function(err, hasRole) {
                                                assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, links[0].id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, links[1].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.archiveId, links[1].id, function(err, hasRole) {
                                                            assert.equal(hasRole, true);
                                                            AuthzAPI.hasRole(user.user.id, links[1].id, 'viewer', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, links[2].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.archiveId, links[2].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasRole(user.user.id, link[0].id, 'manager', function(err, hasRole) {
                                                                            assert.equal(hasRole, true);
                                                                            AuthzAPI.hasAnyRole(userToDelete.user.id, link[0].id, function(err, hasRole) {
                                                                                assert.equal(hasRole, false);
                                                                                AuthzAPI.hasAnyRole(userArchive.archiveId, link[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    return callback();
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user collabdocs and resources roles
         */
        it('Verify remove user - Promote users role on collabdocs', function(callback) {
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate collabdocs
                PrincipalsTestUtil.generateCollabdocs(userToDelete.restContext, 'private', 4,  function(err, collabdocs) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateCollabdocs(user.restContext, 'private', 2,  function(err, collabdocUser) {
                        assert.ok(!err);

                        // Generate rights collabdocs
                        PrincipalsTestUtil.generateRightContent(userToDelete, user, 'manager', collabdocs[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightContent(userToDelete, user, 'editor', collabdocs[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightContent(userToDelete, user, 'viewer', collabdocs[2], function(err) {
                                    assert.ok(!err);
                                    PrincipalsTestUtil.generateRightContent(user, userToDelete, 'editor', collabdocUser[0], function(err) {
                                        assert.ok(!err); 
                                        PrincipalsTestUtil.generateRightContent(user, userToDelete, 'viewer', collabdocUser[1], function(err) {
                                            assert.ok(!err); 

                                            // Delete User
                                            PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                                assert.ok(!err); 
                                                assert.ok(userArchive); 

                                                // Verify roles
                                                AuthzAPI.hasAnyRole(userToDelete.user.id, collabdocs[0].id, function(err, hasRole) {
                                                    assert.equal(hasRole, false);
                                                     AuthzAPI.hasAnyRole(userArchive.archiveId, collabdocs[0].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasRole(user.user.id, collabdocs[0].id, 'manager', function(err, hasRole) {
                                                            assert.equal(hasRole, true);
                                                            AuthzAPI.hasAnyRole(userToDelete.user.id, collabdocs[1].id, function(err, hasRole) {
                                                                assert.equal(hasRole, false);
                                                                AuthzAPI.hasAnyRole(userArchive.archiveId, collabdocs[1].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(user.user.id, collabdocs[1].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasAnyRole(userToDelete.user.id, collabdocs[2].id, function(err, hasRole) {
                                                                            assert.equal(hasRole, false);
                                                                            AuthzAPI.hasRole(userArchive.archiveId, collabdocs[2].id, 'manager', function(err, hasRole) {
                                                                                assert.equal(hasRole, true);
                                                                                AuthzAPI.hasRole(user.user.id, collabdocs[2].id, 'viewer', function(err, hasRole) {
                                                                                    assert.equal(hasRole, true);
                                                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, collabdocs[3].id, function(err, hasRole) {
                                                                                        assert.equal(hasRole, false);
                                                                                        AuthzAPI.hasRole(userArchive.archiveId, collabdocs[3].id, 'manager', function(err, hasRole) {
                                                                                            assert.equal(hasRole, true);
                                                                                            AuthzAPI.hasAnyRole(user.user.id, collabdocs[3].id, function(err, hasRole) {
                                                                                                assert.equal(hasRole, false);
                                                                                                AuthzAPI.hasRole(user.user.id, collabdocUser[0].id, 'manager', function(err, hasRole) {
                                                                                                    assert.equal(hasRole, true);
                                                                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, collabdocUser[0].id, function(err, hasRole) {
                                                                                                        assert.equal(hasRole, false);
                                                                                                        AuthzAPI.hasAnyRole(userArchive.archiveId, collabdocUser[0].id, function(err, hasRole) {
                                                                                                            assert.equal(hasRole, false);
                                                                                                            AuthzAPI.hasRole(user.user.id, collabdocUser[1].id, 'manager', function(err, hasRole) {
                                                                                                                assert.equal(hasRole, true);
                                                                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, collabdocUser[1].id, function(err, hasRole) {
                                                                                                                    assert.equal(hasRole, false);
                                                                                                                    AuthzAPI.hasAnyRole(userArchive.archiveId, collabdocUser[1].id, function(err, hasRole) {
                                                                                                                        assert.equal(hasRole, false);
                                                                                                                        return callback();
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
         });

        /**
         * Test that verifies definitive delation remove user files and resources roles
         */
        it('Verify remove user - Promote users role on files', function(callback) {
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate files
                PrincipalsTestUtil.generateFiles(userToDelete.restContext, 'private', 3,  function(err, files) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateFiles(user.restContext, 'private', 1,  function(err, file) {
                        assert.ok(!err);

                        // Generate rights files
                        PrincipalsTestUtil.generateRightContent(userToDelete, user, 'manager', files[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightContent(userToDelete, user, 'viewer', files[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightContent(user, userToDelete, 'viewer', file[0], function(err) {
                                    assert.ok(!err);

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 

                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, files[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.archiveId, files[0].id, function(err, hasRole) {
                                                assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, files[0].id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, files[1].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.archiveId, files[1].id, function(err, hasRole) {
                                                            assert.equal(hasRole, true);
                                                            AuthzAPI.hasRole(user.user.id, files[1].id, 'viewer', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, files[2].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.archiveId, files[2].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasAnyRole(user.user.id, files[2].id, function(err, hasRole) {
                                                                            assert.equal(hasRole, false);
                                                                            AuthzAPI.hasRole(user.user.id, file[0].id, 'manager', function(err, hasRole) {
                                                                                assert.equal(hasRole, true);
                                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, file[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    AuthzAPI.hasAnyRole(userArchive.archiveId, file[0].id, function(err, hasRole) {
                                                                                        assert.equal(hasRole, false);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user meetings and resources roles
         */
        it('Verify remove user - Promote users role on meetings', function(callback) {
           // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate meetings
                PrincipalsTestUtil.generateMeetings(userToDelete.restContext, userToDelete.user, 'private', 3, function(err, meetings) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateMeetings(user.restContext, user.user, 'private', 1, function(err, meeting) {
                        assert.ok(!err);
                        // Generate rights meetings
                        PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, userToDelete, user, 'manager', meetings[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, userToDelete, user, 'member', meetings[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, user, userToDelete, 'member', meeting[0], function(err) {
                                    assert.ok(!err); 

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, meetings[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.archiveId, meetings[0].id, function(err, hasRole) {
                                                assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, meetings[0].id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, meetings[1].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.archiveId, meetings[1].id, function(err, hasRole) {
                                                            assert.equal(hasRole, false);
                                                            AuthzAPI.hasRole(user.user.id, meetings[1].id, 'manager', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, meetings[2].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.archiveId, meetings[2].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasAnyRole(user.user.id, meetings[2].id, function(err, hasRole) {
                                                                            assert.equal(hasRole, false);
                                                                            AuthzAPI.hasRole(user.user.id, meeting[0].id, 'manager', function(err, hasRole) {
                                                                                assert.equal(hasRole, true);
                                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, meeting[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    AuthzAPI.hasAnyRole(userArchive.archiveId, meeting[0].id, function(err, hasRole) {
                                                                                        assert.equal(hasRole, false);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user discussions and resources roles
         */
        it('Verify remove user - Promote users role on discussions', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate discussions
                PrincipalsTestUtil.generateDiscussions(userToDelete.restContext, 'private', 3,  function(err, discussions) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateDiscussions(user.restContext, 'private', 1,  function(err, discussion) {
                        assert.ok(!err);
                        
                        // Generate rights discussions
                        PrincipalsTestUtil.generateRightDiscussion(userToDelete, user, 'manager', discussions[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightDiscussion(userToDelete, user, 'member', discussions[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightDiscussion(user, userToDelete, 'member', discussion[0], function(err) {
                                    assert.ok(!err);

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 
                                        
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, discussions[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.archiveId, discussions[0].id, function(err, hasRole) {
                                                assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, discussions[0].id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, discussions[1].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.archiveId, discussions[1].id, function(err, hasRole) {
                                                            assert.equal(hasRole, false);
                                                            AuthzAPI.hasRole(user.user.id, discussions[1].id, 'manager', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, discussions[2].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.archiveId, discussions[2].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasAnyRole(user.user.id, discussions[2].id, function(err, hasRole) {
                                                                            assert.equal(hasRole, false);
                                                                            AuthzAPI.hasRole(user.user.id, discussion[0].id, 'manager', function(err, hasRole) {
                                                                                assert.equal(hasRole, true);
                                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, discussion[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    AuthzAPI.hasAnyRole(userArchive.archiveId, discussion[0].id, function(err, hasRole) {
                                                                                        assert.equal(hasRole, false);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user groups and resources roles
         */
        it('Verify remove user - Promote users role on groups', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate groups
                PrincipalsTestUtil.generateGroups(userToDelete.restContext, 'private', 3,  function(err, groups) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateGroups(user.restContext, 'private', 1,  function(err, group) {
                        assert.ok(!err);
                        
                        // Generate rights groups
                        PrincipalsTestUtil.generateRightGroup(userToDelete, user, 'manager', groups[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightGroup(userToDelete, user, 'member', groups[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightGroup(user, userToDelete, 'member', group[0], function(err) {
                                    assert.ok(!err);

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 
                                        
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, groups[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.archiveId, groups[0].id, function(err, hasRole) {
                                                assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, groups[0].id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, groups[1].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.archiveId, groups[1].id, function(err, hasRole) {
                                                            assert.equal(hasRole, false);
                                                            AuthzAPI.hasRole(user.user.id, groups[1].id, 'manager', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, groups[2].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.archiveId, groups[2].id, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasAnyRole(user.user.id, groups[2].id, function(err, hasRole) {
                                                                            assert.equal(hasRole, false);
                                                                            AuthzAPI.hasRole(user.user.id, group[0].id, 'manager', function(err, hasRole) {
                                                                                assert.equal(hasRole, true);
                                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, group[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    AuthzAPI.hasAnyRole(userArchive.archiveId, group[0].id, function(err, hasRole) {
                                                                                        assert.equal(hasRole, false);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation remove user folders and resources roles
         */
        it('Verify remove user - Promote users role on folders', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate folders
                PrincipalsTestUtil.generateFolders(userToDelete, 'private', 3,  function(err, folders) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateFolders(user, 'private', 1,  function(err, folder) {
                        assert.ok(!err);
                        
                        // Generate rights folders
                        PrincipalsTestUtil.generateRightFolder(userToDelete, user, 'manager', folders[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightFolder(userToDelete, user, 'viewer', folders[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightFolder(user, userToDelete, 'viewer', folder[0], function(err) {
                                    assert.ok(!err);

                                    // Delete User
                                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                        assert.ok(!err); 
                                        assert.ok(userArchive); 
                                        
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, folders[0].groupId, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                             AuthzAPI.hasAnyRole(userArchive.archiveId, folders[0].groupId, function(err, hasRole) {
                                                assert.equal(hasRole, false);
                                                AuthzAPI.hasRole(user.user.id, folders[0].groupId, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasAnyRole(userToDelete.user.id, folders[1].groupId, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userArchive.archiveId, folders[1].groupId, function(err, hasRole) {
                                                            assert.equal(hasRole, false);
                                                            AuthzAPI.hasRole(user.user.id, folders[1].groupId, 'manager', function(err, hasRole) {
                                                                assert.equal(hasRole, true);
                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, folders[2].groupId, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasRole(userArchive.archiveId, folders[2].groupId, 'manager', function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasAnyRole(user.user.id, folders[2].groupId, function(err, hasRole) {
                                                                            assert.equal(hasRole, false);
                                                                            AuthzAPI.hasRole(user.user.id, folder[0].groupId, 'manager', function(err, hasRole) {
                                                                                assert.equal(hasRole, true);
                                                                                AuthzAPI.hasAnyRole(userToDelete.user.id, folder[0].groupId, function(err, hasRole) {
                                                                                    assert.equal(hasRole, false);
                                                                                    AuthzAPI.hasAnyRole(userArchive.archiveId, folder[0].groupId, function(err, hasRole) {
                                                                                        assert.equal(hasRole, false);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the data in the table DataArchive
         */
        it('Verify remove user - DataArchive table', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                var list = [];
                PrincipalsTestUtil.generateFolders(userToDelete, 'private', 1,  function(err, folder) {
                    assert.ok(!err);
                    PrincipalsTestUtil.generateGroups(userToDelete.restContext, 'private', 1,  function(err, group) {
                        assert.ok(!err);
                        PrincipalsTestUtil.generateDiscussions(userToDelete.restContext, 'private', 1,  function(err, discussion) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateMeetings(userToDelete.restContext, userToDelete.user, 'private', 1, function(err, meeting) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateFiles(userToDelete.restContext, 'private', 1,  function(err, file) {
                                    assert.ok(!err);
                                    PrincipalsTestUtil.generateLinks(userToDelete.restContext, 'private', 1,  function(err, link) {
                                        assert.ok(!err);
                                        PrincipalsTestUtil.generateCollabdocs(userToDelete.restContext, 'private', 1,  function(err, collabdoc) {
                                            assert.ok(!err);

                                            // Add element to a list
                                            list.push(group[0].id);
                                            list.push(discussion[0].id);
                                            list.push(meeting[0].id);
                                            list.push(file[0].id);
                                            list.push(link[0].id);
                                            list.push(collabdoc[0].id);
                                            list.push(folder[0].id);

                                            // Delete User
                                            PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                                assert.ok(!err); 
                                                assert.ok(userArchive); 
                                                
                                                // Get Data and compare it with the id list
                                                PrincipalsDAO.getDataFromArchive(userArchive.archiveId, userToDelete.user.id, function(err, elements) {
                                                    var listElementId = [];
                                                    elements.resourceId.split(',').forEach(function(element) {
                                                        listElementId.push(element);
                                                    });

                                                    assert.ok(!err); 
                                                    assert.deepEqual(list.sort(), listElementId.sort());
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the data in the table DataArchive
         */
        it('Verify remove user - Discussions are in the library of userArchive', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateDiscussions(userToDelete.restContext, 'private', 1,  function(err, discussion) {
                    assert.ok(!err);
                                    
                    // TODO : find another solution
                    userArchive.archiveId = userArchive.user.id;

                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                        assert.ok(!err); 
                        assert.ok(userArchive); 
                        
                        // Discussion is in library
                        checkLibrary(camAdminRestContext, userArchive.archiveId, true, [discussion], function() {
                            return callback();
                        });

                    });
                });
            });
        });

        /**
         * Checks a principal library.
         *
         * @param  {RestContext}    restCtx         The context to use to do the request
         * @param  {String}         libraryOwnerId  The principal for which to retrieve the library
         * @param  {Boolean}        expectAccess    Whether or not retrieving the library should be successfull
         * @param  {Discussion[]}   expectedItems   The expected discussions that should return
         * @param  {Function}       callback        Standard callback function
         */
        var checkLibrary = function(restCtx, libraryOwnerId, expectAccess, expectedItems, callback) {
            RestAPI.Discussions.getDiscussionsLibrary(restCtx, libraryOwnerId, null, null, function(err, items) {
                if (!expectAccess) {
                    assert.equal(err.code, 401);
                    assert.ok(!items);
                } else {
                    assert.ok(!err);

                    // Make sure only the expected items are returned.
                    assert.equal(items.results.length, expectedItems.length);
                    _.each(expectedItems, function(expectedDiscussion) {
                        assert.ok(_.filter(items.results, function(discussion) { return discussion.id === expectedDiscussion.id; }));
                    });
                }
                return callback();
            });
        };

        /**
         * Test that verifies if elements are in the library
         */
        it('Verify remove user - Groups are in the library of userArchive', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateGroups(userToDelete.restContext, 'private', 1,  function(err, group) {
                    assert.ok(!err);

                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                        assert.ok(!err); 
                        assert.ok(userArchive); 
                        
                        // Groups is in library
                        RestAPI.Group.getMembershipsLibrary(camAdminRestContext, userArchive.archiveId, null, group.length, function(err, data) {
                            assert.ok(!err);
                            var library = data.results;
                            assert.equal(library.length, group.length);
                            assert.equal(library[0].id, group[0].id);

                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies if elements are in the library
         */
        it('Verify remove user - Contents are in the library of userArchive', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, userToDelete, userArchive) {
                assert.ok(!err);

                var list = [];
                // Generate element
                PrincipalsTestUtil.generateFiles(userToDelete.restContext, 'private', 1,  function(err, file) {
                    assert.ok(!err);
                    PrincipalsTestUtil.generateLinks(userToDelete.restContext, 'private', 1,  function(err, link) {
                        assert.ok(!err);
                        PrincipalsTestUtil.generateCollabdocs(userToDelete.restContext, 'private', 1,  function(err, collabdoc) {
                            assert.ok(!err);

                            list.push(file[0].id);
                            list.push(link[0].id);
                            list.push(collabdoc[0].id);
                            list.sort();

                            // Delete User
                            PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                                assert.ok(!err); 
                                assert.ok(userArchive); 
                                
                                // Content is in library
                                RestAPI.Content.getLibrary(camAdminRestContext, userArchive.archiveId, null, list.length, function(err, data) {
                                    assert.ok(!err);
                                    var library = [];
                                    data.results.forEach(function(element) {
                                        library.push(element.id);
                                    });
                                    library.sort();
                                    assert.deepEqual(library, list);

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies if elements are in the library
         */
        it('Verify remove user - Meetings are in the library of userArchive', function(callback) {
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateMeetings(userToDelete.restContext, userToDelete.user, 'private', 1, function(err, meeting) {
                    assert.ok(!err);

                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                        assert.ok(!err); 
                        assert.ok(userArchive); 
                        
                        // Meeting is in library
                        MeetingAPI.getMeetingsLibrary(camAdminRestContext, userArchive.archiveId, null, null, function(err, data) {
                            assert.ok(!err);
                            assert.equal(data.length, meeting.length);
                            assert.equal(data[0].id, meeting[0].id);

                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies if elements are in the library
         */
        it('Verify remove user - Folders are in the library of userArchive', function(callback) {
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateFolders(userToDelete, 'private', 1,  function(err, folder) {
                    assert.ok(!err);

                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive) { 
                        assert.ok(!err); 
                        assert.ok(userArchive); 
                        
                        // Folder is in library
                        FoldersTestUtil.assertGetAllFoldersLibrarySucceeds(camAdminRestContext, userArchive.archiveId, null, function(library, responses) {
                            assert.equal(library.length, folder.length);
                            assert.equal(library[0].id, folder[0].id);

                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('Delete user - step 2', function() {

        /**
         * Test that verifies rights of user archive on meeting
         */
        it('Verify remove user - Rights of user archive on meeting && table DataArchive', function(callback) {
           
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateMeetings(userToDelete.restContext, userToDelete.user, 'private', 1, function(err, meeting) {
                    assert.ok(!err);
                                    
                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                        assert.ok(!err); 
                        assert.ok(resUserArchive); 

                        PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                            assert.ok(!err); 

                            // Get Data and compare it with the id list
                            PrincipalsDAO.getDataFromArchive(userArchive.archiveId, userToDelete.user.id, function(err, listElement) {
                                assert.deepEqual(listElement.length, 0);
                                AuthzAPI.hasAnyRole(userToDelete.user.id, meeting[0].id, function(err, hasRole) {
                                    assert.equal(hasRole, false);
                                    AuthzAPI.hasAnyRole(userArchive.archiveId, meeting[0].id, function(err, hasRole) {
                                        assert.equal(hasRole, false);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies rights of user archive 
         */
        it('Verify remove user - Rights of user archive on content && table DataArchive', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateFiles(userToDelete.restContext, 'private', 1,  function(err, file) {
                    assert.ok(!err);
                    PrincipalsTestUtil.generateLinks(userToDelete.restContext, 'private', 1,  function(err, link) {
                        assert.ok(!err);
                        PrincipalsTestUtil.generateCollabdocs(userToDelete.restContext, 'private', 1,  function(err, collabdoc) {
                            assert.ok(!err);
                        
                            // Delete User
                            PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                                assert.ok(!err); 
                                assert.ok(resUserArchive); 

                                PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                                    assert.ok(!err); 

                                    // Get Data and compare it with the id list
                                    PrincipalsDAO.getDataFromArchive(userArchive.archiveId, userToDelete.user.id, function(err, listElement) {
                                        assert.deepEqual(listElement.length, 0);
                                    
                                        // Verify roles
                                        AuthzAPI.hasAnyRole(userToDelete.user.id, link[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, false);
                                            AuthzAPI.hasAnyRole(userArchive.archiveId, link[0].id, function(err, hasRole) {
                                                assert.equal(hasRole, false);
                                                AuthzAPI.hasAnyRole(userToDelete.user.id, file[0].id, function(err, hasRole) {
                                                    assert.equal(hasRole, false);
                                                    AuthzAPI.hasAnyRole(userArchive.archiveId, file[0].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(userToDelete.user.id, collabdoc[0].id, function(err, hasRole) {
                                                            assert.equal(hasRole, false);
                                                            AuthzAPI.hasAnyRole(userArchive.archiveId, collabdoc[0].id, function(err, hasRole) {
                                                                assert.equal(hasRole, false);
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies rights of user archive on group
         */
        it('Verify remove user - Rights of user archive on group && table DataArchive', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateGroups(userToDelete.restContext, 'private', 1,  function(err, group) {
                    assert.ok(!err);
                                    
                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                        assert.ok(!err); 
                        assert.ok(resUserArchive); 

                        PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                            assert.ok(!err); 

                            // Get Data and compare it with the id list
                            PrincipalsDAO.getDataFromArchive(userArchive.archiveId, userToDelete.user.id, function(err, listElement) {
                                assert.deepEqual(listElement.length, 0);
                            
                                // Verify roles
                                AuthzAPI.hasAnyRole(userToDelete.user.id, group[0].id, function(err, hasRole) {
                                    assert.equal(hasRole, false);
                                    AuthzAPI.hasAnyRole(userArchive.archiveId, group[0].id, function(err, hasRole) {
                                        assert.equal(hasRole, false);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies rights of user archive on discussion
         */
        it('Verify remove user - Rights of user archive on discussion && table DataArchive', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateDiscussions(userToDelete.restContext, 'private', 1,  function(err, discussion) {
                    assert.ok(!err);

                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                        assert.ok(!err); 
                        assert.ok(resUserArchive); 

                        PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                            assert.ok(!err); 

                            // Get Data and compare it with the id list
                            PrincipalsDAO.getDataFromArchive(userArchive.archiveId, userToDelete.user.id, function(err, listElement) {
                                assert.deepEqual(listElement.length, 0);
                            
                                // Verify roles
                                AuthzAPI.hasAnyRole(userToDelete.user.id, discussion[0].id, function(err, hasRole) {
                                    assert.equal(hasRole, false);
                                    AuthzAPI.hasAnyRole(userArchive.archiveId, discussion[0].id, function(err, hasRole) {
                                        assert.equal(hasRole, false);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies rights of user archive on folder
         */
        it('Verify remove user - Rights of user archive on folder && table DataArchive', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateFolders(userToDelete, 'private', 1,  function(err, folder) {
                    assert.ok(!err);

                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                        assert.ok(!err); 
                        assert.ok(resUserArchive); 

                        PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                            assert.ok(!err); 

                            // Get Data and compare it with the id list
                            PrincipalsDAO.getDataFromArchive(userArchive.archiveId, userToDelete.user.id, function(err, listElement) {

                                assert.deepEqual(listElement.length, 0);
                            
                                // Verify roles
                                AuthzAPI.hasAnyRole(userToDelete.user.id, folder[0].groupId, function(err, hasRole) {
                                    assert.equal(hasRole, false);
                                    AuthzAPI.hasAnyRole(userArchive.archiveId, folder[0].groupId, function(err, hasRole) {
                                        assert.equal(hasRole, false);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies rights of user archive on meeting
         */
        it('Verify remove user - If adding manager, don\'t remove the meeting', function(callback) {
           
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateMeetings(userToDelete.restContext, userToDelete.user, 'private', 1, function(err, meeting) {
                    assert.ok(!err);
                                    
                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                        assert.ok(!err); 
                        assert.ok(resUserArchive); 

                        // Generate rights meetings
                        PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, userArchive, user, 'manager', meeting[0], function(err) {
                            assert.ok(!err);

                            PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                                assert.ok(!err); 

                                // Cheak roles
                                AuthzAPI.hasAnyRole(userToDelete.user.id, meeting[0].id, function(err, hasRole) {
                                    assert.equal(hasRole, false);
                                    AuthzAPI.hasAnyRole(userArchive.archiveId, meeting[0].id, function(err, hasRole) {
                                        assert.equal(hasRole, false);
                                        AuthzAPI.hasAnyRole(user.user.id, meeting[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies rights of user archive on discussion
         */
        it('Verify remove user - If adding manager, don\'t remove the discussion', function(callback) {
           
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateDiscussions(userToDelete.restContext, 'private', 1, function(err, discussion) {
                    assert.ok(!err);
                                    
                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                        assert.ok(!err); 
                        assert.ok(resUserArchive); 

                        // Generate rights discussion
                        PrincipalsTestUtil.generateRightDiscussion(userArchive, user, 'manager', discussion[0], function(err) {
                            assert.ok(!err);

                            PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                                assert.ok(!err); 

                                // Cheak roles
                                AuthzAPI.hasAnyRole(userToDelete.user.id, discussion[0].id, function(err, hasRole) {
                                    assert.equal(hasRole, false);
                                    AuthzAPI.hasAnyRole(userArchive.archiveId, discussion[0].id, function(err, hasRole) {
                                        assert.equal(hasRole, false);
                                        AuthzAPI.hasAnyRole(user.user.id, discussion[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies rights of user archive on link && file
         */
        it('Verify remove user - If adding manager, don\'t remove the content', function(callback) {
           
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateFiles(userToDelete.restContext, 'private', 1, function(err, file) {
                    assert.ok(!err);
                    PrincipalsTestUtil.generateLinks(userToDelete.restContext, 'private', 1, function(err, link) {
                        assert.ok(!err);
                        PrincipalsTestUtil.generateCollabdocs(userToDelete.restContext, 'private', 1, function(err, collabdoc) {
                            assert.ok(!err);
                                    
                            // Delete User
                            PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                                assert.ok(!err); 
                                assert.ok(resUserArchive); 

                                // Generate rights 
                                PrincipalsTestUtil.generateRightContent(userArchive, user, 'manager', file[0], function(err) {
                                    assert.ok(!err);
                                    PrincipalsTestUtil.generateRightContent(userArchive, user, 'manager', link[0], function(err) {
                                        assert.ok(!err);
                                        PrincipalsTestUtil.generateRightContent(userArchive, user, 'manager', collabdoc[0], function(err) {
                                            assert.ok(!err);

                                            PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                                                assert.ok(!err); 

                                                // Cheak roles
                                                AuthzAPI.hasAnyRole(userToDelete.user.id, file[0].id, function(err, hasRole) {
                                                    assert.equal(hasRole, false);
                                                    AuthzAPI.hasAnyRole(userArchive.archiveId, file[0].id, function(err, hasRole) {
                                                        assert.equal(hasRole, false);
                                                        AuthzAPI.hasAnyRole(user.user.id, file[0].id, function(err, hasRole) {
                                                            assert.equal(hasRole, true);
                                                            AuthzAPI.hasAnyRole(userToDelete.user.id, link[0].id, function(err, hasRole) {
                                                                assert.equal(hasRole, false);
                                                                AuthzAPI.hasAnyRole(userArchive.archiveId, link[0].id, function(err, hasRole) {
                                                                    assert.equal(hasRole, false);
                                                                    AuthzAPI.hasAnyRole(user.user.id, link[0].id, function(err, hasRole) {
                                                                        assert.equal(hasRole, true);
                                                                        AuthzAPI.hasAnyRole(userToDelete.user.id, collabdoc[0].id, function(err, hasRole) {
                                                                            assert.equal(hasRole, false);
                                                                            AuthzAPI.hasAnyRole(userArchive.archiveId, collabdoc[0].id, function(err, hasRole) {
                                                                                assert.equal(hasRole, false);
                                                                                AuthzAPI.hasAnyRole(user.user.id, collabdoc[0].id, function(err, hasRole) {
                                                                                    assert.equal(hasRole, true);
                                                                                    return callback();
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies rights of user archive on group
         */
        it('Verify remove user - If adding manager, don\'t remove the group', function(callback) {
           
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateGroups(userToDelete.restContext, 'private', 1,  function(err, group) {
                    assert.ok(!err);
                                    
                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                        assert.ok(!err); 
                        assert.ok(resUserArchive); 

                        // Generate rights group
                        PrincipalsTestUtil.assertJoinGroupSucceeds(userArchive.restContext, user.restContext, group[0].id, function(err) {
                            assert.ok(!err);

                            PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                                assert.ok(!err); 

                                // Cheak roles
                                AuthzAPI.hasAnyRole(userToDelete.user.id, group[0].id, function(err, hasRole) {
                                    assert.equal(hasRole, false);
                                    AuthzAPI.hasAnyRole(userArchive.archiveId, group[0].id, function(err, hasRole) {
                                        assert.equal(hasRole, false);
                                        AuthzAPI.hasAnyRole(user.user.id, group[0].id, function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies rights of user archive on folder
         */
        it('Verify remove user - If adding manager, don\'t remove the folder', function(callback) {
           
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate element
                PrincipalsTestUtil.generateFolders(userToDelete, 'private', 1, function(err, folder) {
                    assert.ok(!err);
                                    
                    // Delete User
                    PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, resUserArchive) { 
                        assert.ok(!err); 
                        assert.ok(resUserArchive); 

                        // Generate rights folder
                        PrincipalsTestUtil.generateRightFolder(userArchive, user, 'manager', folder[0], function(err) {
                            assert.ok(!err);

                            PrincipalsDefinitiveDeletionAPI.definitiveDeletion(camAdminRestContext, userToDelete.user, resUserArchive.tenantAlias, function(err) {
                                assert.ok(!err); 

                                // Cheak roles
                                AuthzAPI.hasAnyRole(userToDelete.user.id, folder[0].groupId, function(err, hasRole) {
                                    assert.equal(hasRole, false);
                                    AuthzAPI.hasAnyRole(userArchive.archiveId, folder[0].groupId, function(err, hasRole) {
                                        assert.equal(hasRole, false);
                                        AuthzAPI.hasAnyRole(user.user.id, folder[0].groupId, function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Delete user - Mails', function() {

        /**
         * Test that verifies definitive delation send one email to each users
         */
        it('Verify remove user - Step 1 - Send one mail to each users (files)', function(callback) {
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate files
                PrincipalsTestUtil.generateFiles(userToDelete.restContext, 'private', 3,  function(err, files) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateFiles(user.restContext, 'private', 1,  function(err, file) {
                        assert.ok(!err);

                        // Generate rights files
                        PrincipalsTestUtil.generateRightContent(userToDelete, user, 'manager', files[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightContent(userToDelete, user, 'viewer', files[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightContent(userToDelete, otherUser, 'viewer', files[1], function(err) {
                                    assert.ok(!err);
                                    PrincipalsTestUtil.generateRightContent(user, userToDelete, 'viewer', file[0], function(err) {
                                        assert.ok(!err);
                                        PrincipalsTestUtil.generateRightContent(userToDelete, user, 'viewer', files[2], function(err) {
                                            assert.ok(!err);

                                            var list = [];
                                            list.push(otherUser.user.email);
                                            list.push(user.user.email);
                                            list.sort();

                                            // Delete User
                                            PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive, listEmail) { 
                                                assert.ok(!err); 
                                                listEmail.sort();
                                                // Verify email
                                                assert.deepEqual(listEmail, list);
                                                return callback();                                   
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation send one email to each users
         */
        it('Verify remove user - Step 1 - Send one mail to each users (links)', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate links
                PrincipalsTestUtil.generateLinks(userToDelete.restContext, 'private', 3,  function(err, links) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateLinks(user.restContext, 'private', 1,  function(err, link) {
                        assert.ok(!err);

                        // Generate rights links
                        PrincipalsTestUtil.generateRightContent(userToDelete, user, 'manager', links[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightContent(userToDelete, user, 'viewer', links[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightContent(userToDelete, otherUser, 'viewer', links[1], function(err) {
                                    assert.ok(!err);
                                    PrincipalsTestUtil.generateRightContent(user, userToDelete, 'viewer', link[0], function(err) {
                                        assert.ok(!err);
                                        PrincipalsTestUtil.generateRightContent(userToDelete, user, 'viewer', links[2], function(err) {
                                            assert.ok(!err);

                                            var list = [];
                                            list.push(otherUser.user.email);
                                            list.push(user.user.email);
                                            list.sort();

                                            // Delete User
                                            PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive, listEmail) { 
                                                assert.ok(!err); 
                                                listEmail.sort();
                                                
                                                // Verify email
                                                assert.deepEqual(listEmail, list);
                                                return callback();                                   
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation send one email to each users
         */
        it('Verify remove user - Step 1 - Send one mail to each users (collabdoc)', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate collabdocs
                PrincipalsTestUtil.generateCollabdocs(userToDelete.restContext, 'private', 4,  function(err, collabdocs) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateCollabdocs(user.restContext, 'private', 1,  function(err, collabdocUser) {
                        assert.ok(!err);

                        // Generate rights collabdocs
                        PrincipalsTestUtil.generateRightContent(userToDelete, user, 'manager', collabdocs[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightContent(userToDelete, user, 'editor', collabdocs[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightContent(userToDelete, user, 'viewer', collabdocs[2], function(err) {
                                    assert.ok(!err);
                                    PrincipalsTestUtil.generateRightContent(user, userToDelete, 'editor', collabdocUser[0], function(err) {
                                        assert.ok(!err); 
                                        PrincipalsTestUtil.generateRightContent(userToDelete, otherUser, 'viewer', collabdocs[1], function(err) {
                                            assert.ok(!err); 
                                            PrincipalsTestUtil.generateRightContent(userToDelete, otherUser, 'viewer', collabdocs[2], function(err) {
                                                assert.ok(!err); 

                                                var list = [];
                                                list.push(otherUser.user.email);
                                                list.push(user.user.email);
                                                list.sort();

                                                // Delete User
                                                PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive, listEmail) { 
                                                    assert.ok(!err); 
                                                    listEmail.sort();
                                                    
                                                    // Verify email
                                                    assert.deepEqual(listEmail, list);
                                                    return callback();                                   
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation send one email to each users
         */
        it('Verify remove user - Step 1 - Send one mail to each users (meetings)', function(callback) {
            
            //Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate meetings
                PrincipalsTestUtil.generateMeetings(userToDelete.restContext, userToDelete.user, 'private', 3, function(err, meetings) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateMeetings(user.restContext, user.user, 'private', 1, function(err, meeting) {
                        assert.ok(!err);

                        // Generate rights links
                        PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, userToDelete, user, 'manager', meetings[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, userToDelete, user, 'member', meetings[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, userToDelete, otherUser, 'member', meetings[0], function(err) {
                                    assert.ok(!err);
                                    PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, user, userToDelete, 'member', meeting[0], function(err) {
                                        assert.ok(!err);
                                        PrincipalsTestUtil.generateRightMeeting(camAdminRestContext, userToDelete, user, 'member', meetings[2], function(err) {
                                            assert.ok(!err);

                                            var list = [];
                                            list.push(otherUser.user.email);
                                            list.push(user.user.email);
                                            list.sort();

                                            // Delete User
                                            PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive, listEmail) { 
                                                assert.ok(!err); 
                                                listEmail.sort();
                                                
                                                // Verify email
                                                assert.deepEqual(listEmail, list);
                                                return callback();                                   
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies definitive delation send one email to each users
         */
        it('Verify remove user - Step 1 - Send one mail to each users (groups)', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate groups
                PrincipalsTestUtil.generateGroups(userToDelete.restContext, 'private', 3,  function(err, groups) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateGroups(user.restContext, 'private', 1,  function(err, group) {
                        assert.ok(!err);
                        
                        // Generate rights groups
                        PrincipalsTestUtil.generateRightGroup(userToDelete, user, 'manager', groups[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightGroup(userToDelete, user, 'member', groups[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightGroup(userToDelete, otherUser, 'member', groups[1], function(err) {
                                    assert.ok(!err);
                                    PrincipalsTestUtil.generateRightGroup(user, userToDelete, 'member', group[0], function(err) {
                                        assert.ok(!err);
                                        PrincipalsTestUtil.generateRightGroup(userToDelete, user, 'member', groups[2], function(err) {
                                            assert.ok(!err);
                        
                                            var list = [];
                                            list.push(otherUser.user.email);
                                            list.push(user.user.email);
                                            list.sort();

                                            // Delete User
                                            PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive, listEmail) { 
                                                assert.ok(!err); 
                                                listEmail.sort();
                                                
                                                // Verify email
                                                assert.deepEqual(listEmail, list);
                                                return callback();                                   
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });


        /**
         * Test that verifies definitive delation send one email to each users
         */
        it('Verify remove user - Step 1 - Send one mail to each users (folder)', function(callback) {
            
            // Generate a deleted user to test with
            TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, users, user, otherUser, userToDelete, userArchive) {
                assert.ok(!err);

                // Generate folders
                PrincipalsTestUtil.generateFolders(userToDelete, 'private', 3,  function(err, folders) {
                    assert.ok(!err);  
                    PrincipalsTestUtil.generateFolders(user, 'private', 1,  function(err, folder) {
                        assert.ok(!err);
                        
                        // Generate rights folders
                        PrincipalsTestUtil.generateRightFolder(userToDelete, user, 'manager', folders[0], function(err) {
                            assert.ok(!err);
                            PrincipalsTestUtil.generateRightFolder(userToDelete, user, 'viewer', folders[1], function(err) {
                                assert.ok(!err);
                                PrincipalsTestUtil.generateRightFolder(userToDelete, otherUser, 'viewer', folders[1], function(err) {
                                    assert.ok(!err);
                                    PrincipalsTestUtil.generateRightFolder(user, userToDelete, 'viewer', folder[0], function(err) {
                                        assert.ok(!err);
                                        PrincipalsTestUtil.generateRightFolder(userToDelete, user, 'viewer', folders[2], function(err) {
                                            assert.ok(!err);
                        
                                            var list = [];
                                            list.push(otherUser.user.email);
                                            list.push(user.user.email);
                                            list.sort();

                                            // Delete User
                                            PrincipalsTestUtil.assertDefinitiveDeletionUsersSucceeds(camAdminRestContext, userToDelete, userArchive, function(err, userArchive, listEmail) { 
                                                assert.ok(!err); 
                                                listEmail.sort();

                                                // Verify email
                                                assert.deepEqual(listEmail, list);
                                                return callback();                                   
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

});
