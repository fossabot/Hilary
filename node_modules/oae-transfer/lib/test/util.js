/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var shortid = require('shortid');
var fs = require('fs');
var util = require('util');

var ContentTestUtil = require('oae-content/lib/test/util');
var DiscussionsTestUtil = require('oae-discussions/lib/test/util');
var MeetingAPI = require('oae-jitsi/lib/api.meetings');
var RestAPI = require('oae-rest');

var Transfer = require('oae-transfer/lib/model').Transfer;


/* ================ CREATE TRANSFER ================ */

/**
 * Create a transfer
 *
 * @param  {RestContext}    restContext             The REST context to use for making requests
 * @param  {String}         emailOrigin             The email of the user who wants to create a transfer
 * @param  {String}         emailTarget             The emailTarget of the transfer to create
 * @param  {String}         idUserOrigin            The id of the user who wants to create a transfer
 * @param  {Function}       callback                Standard callback function
 * @param  {Folder}         callback.transfer       Return transfer
 * @throws {AssertionError}                         Thrown if an error occurred generating the tranfer
 */
var assertCreateTransferSucceeds = module.exports.assertCreateTransferSucceeds = function(restContext, emailOrigin, emailTarget, idUserOrigin, callback) {
    RestAPI.Transfer.createTransfer(restContext, idUserOrigin, emailOrigin, emailTarget, function(err, createdTransfer) {
        assert.ok(createdTransfer);
        assert.equal(createdTransfer.emailOrigin, emailOrigin);
        assert.equal(createdTransfer.emailTarget, emailTarget);
        assert.equal(createdTransfer.idUserOrigin, idUserOrigin);
        return callback(createdTransfer);
    });
};

/* ================ GET TRANSFER ================ */

/**
 * Get a transfer, ensuring that it fails in a specified way
 *
 * @param  {RestContext}        restContext     The REST context to use when getting the transfer
 * @param  {String}             idUserOrigin    The id of the user who wants to make the transfer
 * @param  {Number}             httpCode        The expected failure HTTP code of the request
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request did not fail in the expected manner
 */
var assertGetTransferFails = module.exports.assertGetTransferFails = function(restContext, idUserOrigin, httpCode, callback) {
    RestAPI.Transfer.getTransferById(restContext, idUserOrigin, function(err, transfer) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        assert.ok(!transfer);
        return callback(null);
    });
};

/**
 * Get a transfer, ensuring that the request is successful
 *
 * @param  {RestContext}        restContext     The REST context to use when getting the transfer
 * @param  {String}             idUserOrigin    The id of the user who wants to make the transfer
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request did not fail in the expected manner
 */
var assertGetTransferSucceeds = module.exports.assertGetTransferSucceeds = function(restContext, idUserOrigin, callback) {
    RestAPI.Transfer.getTransferById(restContext, idUserOrigin, function(err, transfer) {
        assert.ok(!err);
        assert.ok(transfer);
        assert.strictEqual(transfer.idUserOrigin, idUserOrigin);
        return callback(transfer);
    });
};

/* ================ DELETE TRANSFER ================ */

/**
 * Delete a transfer, ensuring that it fails in a specified way
 *
 * @param  {RestContext}        restContext     The REST context to use when deleting the transfer
 * @param  {String}             emailOrigin     The emailOrigin of the transfer to delete
 * @param  {String}             code            The transfer code of the transfer to delete
 * @param  {String}             idUserOrigin    The idUserOrigin of the transfer to delete
 * @param  {Number}             httpCode        The expected failure HTTP code of the request
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request did not fail in the expected manner
 */
var assertDeleteTransferFails = module.exports.assertDeleteTransferFails = function(restContext, emailOrigin, code, idUserOrigin, httpCode, callback) {
    RestAPI.Transfer.deleteTransfer(restContext, emailOrigin, code, idUserOrigin, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/**
 * Delete a transfer, ensuring that the request is successful
 *
 * @param  {RestContext}        restContext     The REST context to use when deleting the transfer
 * @param  {String}             emailOrigin     The emailOrigin of the transfer to delete
 * @param  {String}             code            The transfer code of the transfer to delete
 * @param  {String}             idUserOrigin    The idUserOrigin of the transfer to delete
 * @param  {Number}             httpCode        The expected failure HTTP code of the request
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request did not fail in the expected manner
 */
var assertDeleteTransferSucceeds = module.exports.assertDeleteTransferSucceeds = function(restContext, emailOrigin, code, idUserOrigin, callback) {
    RestAPI.Transfer.deleteTransfer(restContext, emailOrigin, code, idUserOrigin, function(err) {
        assert.ok(!err);
        return callback();
    });
};

/* ================ MAKE TRANSFER ================ */

/**
 * Execute transfer, ensuring that the request is successful
 *
 * @param  {RestContext}        restContext     The REST context to use when deleting the transfer
 * @param  {String}             emailOrigin     The emailOrigin of the transfer 
 * @param  {String}             code            The code write by the user
 * @param  {String}             emailTarget     The emailTarget of the transfer
 * @param  {String}             idUserTarget    The id of the user target
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var assertMakeTransferSucceeds = module.exports.assertMakeTransferSucceeds = function(restContext, emailOrigin, code, emailTarget, idUserTarget, callback) {
    RestAPI.Transfer.makeTransfer(restContext, emailOrigin, code, emailTarget, idUserTarget, function(err, managers) {
        assert.ok(!err);
        return callback(err, managers);
    });
};

/**
 * Execute transfer, ensuring that it fails in a specified way
 *
 * @param  {RestContext}        restContext     The REST context to use when deleting the transfer
 * @param  {String}             emailOrigin     The emailOrigin of the transfer 
 * @param  {String}             code            The code write by the user
 * @param  {String}             emailTarget     The emailTarget of the transfer
 * @param  {String}             idUserTarget    The id of the user target
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var assertMakeTransferFails = module.exports.assertMakeTransferFails = function(restContext, emailOrigin, code, emailTarget, idUserTarget, httpCode, callback) {
    RestAPI.Transfer.makeTransfer(restContext, emailOrigin, code, emailTarget, idUserTarget, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/* ================ UTIL ================ */

/**
 * Generate discussions
 *
 * @param  {ctx}                context         The REST context to use when ti create the discussions 
 * @param  {String}             privacy         The privacy of the discussions
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var generateDiscussions = module.exports.generateDiscussions = function(ctx, privacy, numToCreate, callback, _created) {
    _created = _created || [];
    if (_created.length === numToCreate) {
        return callback(null, _created);
    }

    RestAPI.Discussions.createDiscussion(ctx, 'name', 'description', privacy, null, null, function(err, discussion) {
        assert.ok(!err);
        _created.push(discussion);
        return generateDiscussions(ctx, privacy, numToCreate, callback, _created);
    });
};

/**
 * Generate links
 *
 * @param  {ctx}                ctx             The REST context to use when create the links 
 * @param  {String}             privacy         The privacy of the links
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var generateLinks = module.exports.generateLinks = function(ctx, privacy, numToCreate, callback, _created) {
    _created = _created || [];
    if (_created.length === numToCreate) {
        return callback(null, _created);
    }

    RestAPI.Content.createLink(ctx, 'name', 'description', privacy, 'google.com', null, null, null, function(err, link) {
        assert.ok(!err);
        _created.push(link);
        return generateLinks(ctx, privacy, numToCreate, callback, _created);
    });
};

/**
 * Generate files
 *
 * @param  {ctx}                ctx             The REST context to use when create the files 
 * @param  {String}             privacy         The privacy of the files
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var generateFiles = module.exports.generateFiles = function(ctx, privacy, numToCreate, callback, _created) {
    _created = _created || [];
    if (_created.length === numToCreate) {
        return callback(null, _created);
    }

    RestAPI.Content.createFile(ctx, 'name', 'description', privacy, getFileStream, null, null, null, function(err, file) {
        assert.ok(!err);
        _created.push(file);
        return generateFiles(ctx, privacy, numToCreate, callback, _created);
    });
};

/**
 * Generate a file
 *
 * @param  {ctx}                ctx             The REST context to use when create the file
 * @param  {String}             privacy         The privacy of the file
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var generateFileOnFolder = module.exports.generateFileOnFolder = function(ctx, privacy, idFolder, idGroup, callback) {
    RestAPI.Content.createFile(ctx, 'name', 'description', privacy, getFileStream, [idGroup], null, [idFolder], function(err, file) {
        assert.ok(!err);
        callback(null, file);
    });
};

/**
 * Generate collabdocs
 *
 * @param  {ctx}                ctx             The REST context to use when create the collabdoc
 * @param  {String}             privacy         The privacy of the collabdoc
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
 var generateCollabdocs = module.exports.generateCollabdocs = function(ctx, privacy, numToCreate, callback, _created) {
    _created = _created || [];
    if (_created.length === numToCreate) {
        return callback(null, _created);
    }

    RestAPI.Content.createCollabDoc(ctx, 'name', 'description', privacy, [], [], [], [], function(err, collabdoc) {
        assert.ok(!err);
        _created.push(collabdoc);
        return generateCollabdocs(ctx, privacy, numToCreate, callback, _created);
    });
};

/**
 * Generate meetings
 *
 * @param  {ctx}                ctx             The REST context to use when create the meetings 
 * @param  {String}             privacy         The privacy of the meetings
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var generateMeetings = module.exports.generateMeetings = function(ctx, manager, privacy, numToCreate, callback, _created) {
    _created = _created || [];
    if (_created.length === numToCreate) {
        return callback(null, _created);
    }
    ctx.tenant = function () { return manager.tenant };
    ctx.user = function () { return manager };

    MeetingAPI.createMeeting(ctx, 'name', 'description', true, false, privacy, {}, function (err, meeting) {
        assert.ok(!err);
        _created.push(meeting);
        return generateMeetings(ctx, manager, privacy, numToCreate, callback, _created);
    });
};

/**
 * Generate right for a content
 *
 * @param  {Object}             owner           The ower of the content
 * @param  {String}             contributor     The user
 * @param  {String}             right           The right to attribute to the user
 * @param  {String}             content         The content to update
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var generateRightContent = module.exports.generateRightContent = function(owner, contributor, right, content, callback) {
    var memberUpdates = {};
    memberUpdates[contributor.user.id] = right;
    ContentTestUtil.assertUpdateContentMembersSucceeds(owner.restContext, owner.restContext, content.id, memberUpdates, function(err) {
        assert.ok(!err);
        callback(null, content);
    });
};

/**
 * Generate right for a discussion
 *
 * @param  {Object}             owner           The ower of the discussion
 * @param  {String}             contributor     The user
 * @param  {String}             right           The right to attribute to the user
 * @param  {String}             discussion      The discussion to update
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var generateRightDiscussion = module.exports.generateRightDiscussion = function(owner, contributor, right, discussion, callback) {
    var memberUpdates = {};
    memberUpdates[contributor.user.id] = right;
    DiscussionsTestUtil.assertUpdateDiscussionMembersSucceeds(owner.restContext, owner.restContext, discussion.id, memberUpdates, function(err) {
        assert.ok(!err);
        callback(null, discussion);
    });
};

/**
 * Generate right for a meeting
 *
 * @param  {Object}             owner           The ower of the meeting
 * @param  {Object}             contributor     The user
 * @param  {String}             right           The right to attribute to the user
 * @param  {Object}             meeting         The meeting to update
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var generateRightMeeting = module.exports.generateRightMeeting = function(ctx, owner, contributor, right, meeting, callback) {
    var memberUpdates = {};
    memberUpdates[contributor.user.id] = right;
    ctx.user = function(){return owner.user;};

    MeetingAPI.setMeetingMembers(ctx, meeting.id, memberUpdates, function (err) {
        assert.ok(!err);
        return callback(null, meeting);
    });
};

/**
 * Get the path
 *
 * @param  {Function}           callback        Standard callback function
 * @throws {AssertionError}                     Thrown if the request failed
 */
var getFileStream = module.exports.getFileStream = function() {
    var file = __dirname + '/data/profilepic.jpg';
    return fs.createReadStream(file);
};
