/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var ShortId = require('shortid');
var util = require('util');
var Cassandra = require('oae-util/lib/cassandra');

var AuthzUtil = require('oae-authz/lib/util');
var Transfer = require('oae-transfer/lib/model').Transfer;

// API
var APILibrary = require('oae-library/lib/api.index');
var APITransfer = require('oae-transfer/lib/api');
var APIUser = require('oae-principals/lib/api.user');

// DAO
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var foldersDAO = require('oae-folders/lib/internal/dao');
var ContentDAO = require('oae-content/lib/internal/dao.content');

var CodeGenerator = require('password-generator');

/** 
 * PUBLIC FUNCTIONS 
 */

/**
 * Create a new transfer.
 *
 * @param  {String}         emailOrigin             Email origin
 * @param  {String}         emailTarget             Email target
 * @param  {String}         idUserOrigin            Id user origin
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {transfer}       callback.transfer       The transfer that was created
 */
var createTransfer = module.exports.createTransfer = function (ctx, emailOrigin, emailTarget, idUserOrigin, callback) {    
    var code = _createTransferCode();
    var finalTimelife = 0;

    _getTimelifeTransfer(ctx, function (err, timelife){
        finalTimelife = timelife * 86400;

        Cassandra.runQuery('INSERT INTO "Transfer" ("emailOrigin", "code", "emailTarget", "idUserOrigin") VALUES (?, ?, ?, ?) USING TTL ?', [emailOrigin, code, emailTarget, idUserOrigin, finalTimelife], function(err) {
            if (err) {
                return callback(err);
            }

            getTransferByEmail(emailOrigin, function (err, transfer){
                return callback(null, transfer);
            });
        });
    });
};

/**
 * Start the transfer.
 *
 * @param  {String}         emailOrigin             Email origin
 * @param  {String}         code                    Code generated by a fonction 
 * @param  {String}         emailTarget             Email target
 * @param  {String}         idUserTarget            Id user target
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {managers}       callback.managers       All the managers of user resource
 */
 var makeTransfer = module.exports.makeTransfer = function (ctx, emailOrigin, code, emailTarget, idUserTarget, callback){
    // Verify value 
    if (_.isEmpty(emailOrigin)) {
        return callback(null, []);
    }
    if (_.isEmpty(code)) {
        return callback(null, []);
    }
    if (_.isEmpty(emailTarget)) {
        return callback(null, []);
    }
    if (_.isEmpty(idUserTarget)) {
        return callback(null, []);
    }

    // Search write transfer
    Cassandra.runQuery('SELECT * FROM "Transfer" WHERE "emailOrigin" = ?', [emailOrigin], function(err, result) {
        if (err) {
            return callback(err);
        }

        // Convert the result to a Transfer
        var transfer = _.chain(result).map(_rowToTransfer);

        // If is the correct code
        if(transfer._wrapped[0].code == code && transfer._wrapped[0].emailTarget == emailTarget){

            // Modify transfer & AuthzRoles & AuthzMembers
            Cassandra.runQuery('SELECT * FROM "AuthzRoles" WHERE "principalId" = ?', [transfer._wrapped[0].idUserOrigin], function(err, result){
                if (err) {
                    return callback(err);
                }
                var authzRoles = _.chain(result).map(_rowToAuthzRoles);

                // Create and run the batch set of queries that will delete and re-create all the AuthzRoles & AuthzMember with the new user id
                var queries = _.chain(authzRoles._wrapped).map(function(hash) { 

                    // Create queries AuthzRoles & AuthzMembers (create & delete).
                    return [
                        {
                            'query': 'INSERT INTO "AuthzRoles" ("principalId", "resourceId", "role") VALUES (?, ?, ?)',
                            'parameters': [idUserTarget, hash.resourceId, hash.role]
                        },
                        {
                            'query': 'INSERT INTO "AuthzMembers" ("resourceId", "memberId", "role") VALUES (?, ?, ?)',
                            'parameters': [hash.resourceId, idUserTarget, hash.role]
                        },
                        {
                            'query': 'DELETE FROM "AuthzRoles" WHERE "principalId" = ? AND "resourceId" = ?',
                            'parameters': [hash.principalId, hash.resourceId]
                        },
                        {
                            'query': 'DELETE FROM "AuthzMembers" WHERE "memberId" = ? AND "resourceId" = ?',
                            'parameters': [hash.principalId, hash.resourceId]
                        }
                    ];
                }).flatten().value();
                
                // Update AuthzRoles & AuthzMembers
                Cassandra.runBatchQuery(queries, function(err) {
                    if (err) {
                        return callback(err);
                    } else {
                        // Delete the transfer in the table "Transfer"
                        deleteTransfer(emailOrigin, function (err){
                            if(err){
                                return callback(err);
                            } else {
                                // Found all managers related to this resource and put then into "managers" 
                                _getManagers(ctx, authzRoles._wrapped, function (err, managers){
                                    if(err){
                                        return callback(err);
                                    } else {
                                        // return managers to send emails
                                        return callback(null, managers);
                                    }
                                });
                            }
                        });
                    }
                });
            });            
        } else {
            return callback(err);
        }
    });
 };

/**
 * Get a transfer data by an email.
 *
 * @param  {String}         email                   Email of user connected
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {transfer}       callback.transfer       User's transfer
 */
var getTransferByEmail = module.exports.getTransferByEmail = function (email, callback) {
    if (_.isEmpty(email)) {
        return callback(null, []);
    }
    Cassandra.runQuery('SELECT * FROM "Transfer" WHERE "emailOrigin" = ?', [email], function(err, result) {
        if (err) {
            return callback(err);
        }
        var transfer = _.chain(result).map(_rowToTransfer);
        return callback(null, transfer._wrapped[0]);
    });
};

/**
 * Delete a transfer data by an email.
 *
 * @param  {String}         emailOrigin             Email of user connected
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 */
var deleteTransfer = module.exports.deleteTransfer = function (emailOrigin, callback) {
    if (_.isEmpty(emailOrigin)) {
        return callback(null);
    }
    Cassandra.runQuery('DELETE FROM "Transfer" WHERE "emailOrigin" = ?', [emailOrigin], function(err, result) {
        if(err) {
            return callback(err);
        }
    });
    return callback(null);
};



/**
 * PRIVATE FUNCTIONS
 */

/**
 * Create entry
 * 
 * @param {any} indexName
 * @param {any} indexKey
 * @param {any} bucketName
 *
 * @returns entry, typeResource
 * @api private
 */
var _createEntry = function (resourceId, memberId, privacity){
    var typeResource = resourceId.split(":")[0];
    var indexName = "content:content";
    

    if(typeResource == "g"){
        indexName = "folders:folders";
        foldersDAO.getFoldersByGroupIds(resourceId, function (err, idFolder){
            resourceId = idFolder;
        });            
    } 
    _createBucketKey(indexName, memberId, privacity, function(err, bucketKey){
        _getRankedResourceId(bucketKey, resourceId, function(err, rankedResourceId){
            if(rankedResourceId === null){
                return callback(err);
            }
            var entry = {
                "id": memberId,
                "resource": {
                    "id" : resourceId,
                    "visibility" : privacity
                },
                "oldRank": rankedResourceId,
                "newRank": rankedResourceId,
                "newValue": null
            };
            return callback(null, entry, typeResource);
        });

    });
};

/**
 * Create bucketKey
 * 
 * @param {any} indexName
 * @param {any} indexKey
 * @param {any} bucketName
 *
 * @returns index
 * @api private
 */
var _createBucketKey = function(indexName, indexKey, bucketName) {
    return callback(null, util.format('%s#%s#%s', indexName, indexKey, bucketName));
};

/**
 * Generate a new unique transfer id
 * 
 * @param {any} emailOrigin
 *
 * @returns generated id
 * @api private
 */
var _createTransferId = function(emailOrigin) {
    return "t"+":"+new Date().toLocaleDateString()+":"+new Date().toLocaleTimeString()+":"+emailOrigin+":"+_createTransferCode();
};

/**
 * Generate a new 8 caracters code
 * 
 * @returns transferCode
 * @api private
 */
var _createTransferCode = function(){
    // parametters : length, memorable, pattern, prefix
    return CodeGenerator(12, false);
};

/**
 * Get managers from authzroles
 * 
 * @param {any} ctx
 * @param {any} authzRoles
 *
 * @returns managers
 * @api private
 */
 // Change the current location of this function (Authzroles)
var _getManagers = function (ctx, authzRoles, callback){
    // Promise to get all managers
    var promise = new Promise(function(resolve, reject){
        var managers = [];
        _.chain(authzRoles).map(function(hash) {  
            // Found all managers related to this resource and put then into "managers"
            Cassandra.runQuery('SELECT * FROM "AuthzMembers" WHERE "resourceId" = ?', [hash.resourceId], function(err, result){
                var authzMembers = _.chain(result).map(_rowToAuthzMembers);
                _.chain(authzMembers._wrapped).map(function(res) {
                    // If the user is the manager
                    if(res.role == "manager"){
                        // Get the user
                        Cassandra.runQuery('SELECT * FROM "Principals" WHERE "principalId" = ?', [res.memberId], function (err, manager) {
                            manager = _.chain(manager).map(Cassandra.rowToHash)._wrapped[0];
                            //APIUser.getUser(ctx, res.memberId, function(err, manager) {
                            if (err) {
                                return callback(err);
                            } else {
                                // Get the name of the document that the user manage and put the manager and the name document into "managers"
                                _getNameDocument(hash.resourceId, function (err, result){
                                    manager.resource = result;
                                    managers.push(manager);
                                    // If all managers found, callback
                                    if (managers.length == authzRoles.length){
                                        resolve(managers);
                                    } 
                                }); 
                            }
                        });
                    }
                });
            });   
        }); 
    });

    // Return managers
    promise.then(function(managers){
        return callback(null, managers);
    }).catch(function(){
        return callback(null);
    });
};

/**
 * Get the name of the resource by it's id
 * 
 * @param {any} idResource
 *
 * @returns resource's name
 * @api private
 */
var _getNameDocument = function (idResource, callback){
    typeResource = idResource.split(":")[0];

    if(typeResource == "c"){        
        ContentDAO.getContent(idResource, function(err, result){
            if(err){
                return callback(err);
            }
            return callback(null, result.displayName);
        });
    } else if (typeResource == "g"){
        _getFoldersByGroupIds(idResource, function(err, result){
            if(err){
                return callback(err);
            }
            return callback(null, result.displayName);
        }); 
    }
};

/**
 * Get folder by group id
 * 
 * @param {any} idResource
 *
 * @returns folder
 * @api private
 */
 // TODO use the property fonction instead of this one
var _getFoldersByGroupIds = function (idResource, callback){
    Cassandra.runQuery('SELECT * FROM "FoldersGroupId" WHERE "groupId" = ?', [idResource], function(err, result){
        Cassandra.runQuery('SELECT * FROM "Folders" WHERE "id" = ?', [_.chain(result).map(Cassandra.rowToHash)._wrapped[0].folderId], function(err, resultFolder){
            return callback(null, _.chain(resultFolder).map(Cassandra.rowToHash)._wrapped[0]);
        });
    });
};

/**
 * Create a transfer model object from its id and the storage hash
 *
 * @param {String} emailOrigin        
 * @param {Object} hash  
 *   
 * @return {Folder}                         
 * @api private
 */
var _storageHashToTransfer = function (emailOrigin, hash) {
    return new Transfer(
        hash.emailOrigin,
        hash.code,
        hash.emailTarget,
        hash.idUserOrigin
    );
};

/**
 * Convert a Helenus Row into a Transfer object
 *
 * @param {row}

 * @return {Transfer}               
 * @api private
 */
var _rowToTransfer = function(row) {
    var storageHash = Cassandra.rowToHash(row);
    try {
        storageHash.previews = JSON.parse(storageHash.previews);
    } catch (err) {
        storageHash.previews = {};
    }
    return _storageHashToTransfer(storageHash.emailOrigin, storageHash);
};

/**
 * Create a authzRoles model object from its id and the storage hash
 *
 * @param {String} principalId        
 * @param {Object} hash  
 *   
 * @return {AuthzRoles}                         
 * @api private
 */
var _storageHashToAuthzRoles = function (principalId, hash) {
    var authzRoles = {
        "principalId": hash.principalId,
        "resourceId": hash.resourceId,
        "role": hash.role
    };
    return authzRoles;
};

/**
 * Convert a Helenus Row into a AuthzRoles object
 *
 * @param {row}

 * @return {AuthzRoles}               
 * @api private
 */
var _rowToAuthzRoles = function(row) {
    var storageHash = Cassandra.rowToHash(row);
    try {
        storageHash.previews = JSON.parse(storageHash.previews);
    } catch (err) {
        storageHash.previews = {};
    }
    return _storageHashToAuthzRoles(storageHash.principalId, storageHash);
};

/**
 * Create a authzMembers model object from its id and the storage hash
 *
 * @param {String} resourceId        
 * @param {Object} hash  
 *   
 * @return {AuthzRoles}                         
 * @api private
 */
var _storageHashToAuthzMembers = function (resourceId, hash) {
    var authzMembers = {
        "resourceId": hash.resourceId,
        "memberId": hash.memberId,
        "role": hash.role
    };
    return authzMembers;
};

/**
 * Convert a Helenus Row into a AuthzMembers object
 *
 * @param {row}

 * @return {AuthzMembers}               
 * @api private
 */
var _rowToAuthzMembers = function(row) {
    var storageHash = Cassandra.rowToHash(row);
    try {
        storageHash.previews = JSON.parse(storageHash.previews);
    } catch (err) {
        storageHash.previews = {};
    }
    return _storageHashToAuthzMembers(storageHash.resourceId, storageHash);
};

/**
 * Get the time life transfer.
 *
 * @param  {Object}         ctx                     Context to determine the time life of a transfer code
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            Error
 */
// TODO make this fonction generic
var _getTimelifeTransfer = function (ctx, callback) {
    if (_.isEmpty(ctx)) {
        return callback(null, []);
    }

    var defaultTime = 1;
    var configkey = "oae-transfer/timelifeTransfer/timelife";

    Cassandra.runQuery('SELECT "value" FROM "Config" WHERE "tenantAlias" = ? AND "configKey" = ?', [ctx.tenant().alias, configkey], function(err, result) {
        if (err) {
            return callback(err);
        }

        if (_.isEmpty(result)){
            return callback(null, defaultTime);
            
        } else {
            conf = _.chain(result).map(Cassandra.rowToHash)._wrapped[0];
            return callback(null, conf.value);
        }
    });
};
