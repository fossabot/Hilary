/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

// API
var AuthzAPI = require('oae-authz');
var RestAPI = require('oae-rest');

// Util
var TestsUtil = require('oae-tests');
var TransferTestUtil = require('oae-transfer/lib/test/util');

describe('Transfer', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var camAnonymousRestContext = null;
    var gtAdminRestContext = null;
    var gtAnonymousRestContext = null;

    /*
     * Set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);   
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();     
        return callback();
    });

    describe('Create Transfer', function() {
        /**
         * Test that verifies creation of a transfer
         */
        it('verify transfer creation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, stuartf) {
                assert.ok(!err);
                TransferTestUtil.assertCreateTransferSucceeds(mrvisser.restContext, mrvisser.user.email, stuartf.user.email, mrvisser.user.id, function(createdTransfer) {
                    // Ensure the returned folder model is accurate   
                    assert.ok(createdTransfer);
                    assert.equal(createdTransfer.emailOrigin, mrvisser.user.email);
                    assert.equal(createdTransfer.emailTarget, stuartf.user.email);
                    assert.equal(createdTransfer.idUserOrigin, mrvisser.user.id);
                    
                    // Sanity check that the transfer was created
                    TransferTestUtil.assertGetTransferSucceeds(mrvisser.restContext, createdTransfer.idUserOrigin, function(transfer) {
                        // Ensure the fetched folder model is consistent with the created one
                        assert.ok(transfer);
                        assert.ok(transfer.code);
                        assert.equal(transfer.emailOrigin, mrvisser.user.email);
	                    assert.equal(transfer.emailTarget, stuartf.user.email);
	                    assert.equal(transfer.idUserOrigin, mrvisser.user.id);
                        return callback();
                    });
                });
            });
        });
    });

    describe('Get Transfer', function() {
        /**
         * Test that verifies validation of getting a folder
         */
        it('verify get transfer', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, stuartf) {
                assert.ok(!err);
                TransferTestUtil.assertCreateTransferSucceeds(mrvisser.restContext, mrvisser.user.email, stuartf.user.email, mrvisser.user.id, function(transfer) {
                    // Ensure fetching using an invalid id results in an error
                    TransferTestUtil.assertGetTransferFails(mrvisser.restContext, 'nonexistingid', 400, function() {
                        // Sanity check getting an existing folder
                        TransferTestUtil.assertGetTransferSucceeds(mrvisser.restContext, transfer.idUserOrigin, function(transfer) {
                            assert.ok(transfer);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies datas
         */
        it('verify get transfer data', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, stuartf) {
                assert.ok(!err);
                TransferTestUtil.assertCreateTransferSucceeds(mrvisser.restContext, mrvisser.user.email, stuartf.user.email, mrvisser.user.id, function(transfer) {
                    // Sanity check that the transfer was created
                    TransferTestUtil.assertGetTransferSucceeds(mrvisser.restContext, transfer.idUserOrigin, function(fetchedTransfer) {
                        // Ensure the fetched folder model is consistent with the created one
                        assert.ok(fetchedTransfer);
                        assert.ok(fetchedTransfer.code);
                        assert.equal(fetchedTransfer.emailOrigin, mrvisser.user.email);
                        assert.equal(fetchedTransfer.emailTarget, stuartf.user.email);
                        assert.equal(fetchedTransfer.idUserOrigin, mrvisser.user.id);

                        return callback();
                    });
                });
            });
        });

    });

    describe('Delete Transfer', function() {
        /**
         * Test that verifies validation of deleting a folder
         */
        it('verify delete transfer validation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, stuartf) {
                assert.ok(!err);
                TransferTestUtil.assertCreateTransferSucceeds(mrvisser.restContext, mrvisser.user.email, stuartf.user.email, mrvisser.user.id, function(transfer) {
                    // Ensure deleting works
                    TransferTestUtil.assertDeleteTransferSucceeds(mrvisser.restContext, transfer.emailOrigin, transfer.code, transfer.idUserOrigin, function() {
                        // Sanity-check it was not removed
                        TransferTestUtil.assertGetTransferFails(mrvisser.restContext, transfer.idUserOrigin, 400, function(transfer) {
                            assert.ok(!transfer);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('Make transfer', function() {
        /**
         * Test that verify all transfer fails
         */
        it('verify if transfer works', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, stuartf) {
                assert.ok(!err);
                TransferTestUtil.assertCreateTransferSucceeds(mrvisser.restContext, mrvisser.user.email, stuartf.user.email, mrvisser.user.id, function(transfer) {
                    // Ensure the returned folder model is accurate   
                    assert.ok(transfer);
                    // Wrong code
                    TransferTestUtil.assertMakeTransferFails(stuartf.restContext, mrvisser.user.email, 'wrongTransferCode', stuartf.user.email, stuartf.user.id, 400, function() {
                        // Invalid email origin
                        TransferTestUtil.assertMakeTransferFails(stuartf.restContext, 'invalideEmail', transfer.code, stuartf.user.email, stuartf.user.id, 400, function() {
                            // Empty email
                            TransferTestUtil.assertMakeTransferFails(stuartf.restContext, '', transfer.code, stuartf.user.email, stuartf.user.id, 400, function() {
                                // Empty code
                                TransferTestUtil.assertMakeTransferFails(stuartf.restContext, mrvisser.user.email, '', stuartf.user.email, stuartf.user.id, 400, function() {
                                    // Wrong email origin email
                                    TransferTestUtil.assertMakeTransferFails(stuartf.restContext, 'wrongemail@email.com', transfer.code, stuartf.user.email, stuartf.user.id, 400, function() {
                                        // There is no data to transfer
                                        TransferTestUtil.assertMakeTransferFails(stuartf.restContext, mrvisser.user.email, transfer.code, stuartf.user.email, stuartf.user.id, 400, function() {
                                            TransferTestUtil.generateDiscussions(mrvisser.restContext, 'private', function(err, mrvisserdoc1, mrvisserdoc2, mrvisserdoc3) {
                                                assert.ok(!err);
                                                TransferTestUtil.assertMakeTransferSucceeds(stuartf.restContext, mrvisser.user.email, transfer.code, stuartf.user.email, stuartf.user.id, function(err) {
                                                    assert.ok(!err);
                                                    // Make sure the transfer is deleted
                                                    TransferTestUtil.assertGetTransferFails(mrvisser.restContext, transfer.emailOrigin, 400, function() {
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
    
});
