/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

// API
var AuthzAPI = require('oae-authz');
var RestAPI = require('oae-rest');

// Util
var TestsUtil = require('oae-tests');
var TransferTestUtil = require('oae-transfer/lib/test/util');

describe('Transfer-content', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;
    var camAnonymousRestContext = null;
    var gtAdminRestContext = null;
    var gtAnonymousRestContext = null;

    /*
     * Set up all the REST contexts for admin and anonymous users with which we
     * will invoke requests
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        gtAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host);   
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();     
        return callback();
    });

    describe('Make transfer - links', function() {
        /**
         * Test that verify if transfer find the good manager
         */
        it('verify if transfer find good manager', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, stuartf, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate links
                    TransferTestUtil.generateLink(mrvisser.restContext, 'private', function(err, mrvisserlink) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvisserlink, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightContent(mrvisser, stuartf, 'viewer', mrvisserlink, function(err) {
                                assert.ok(!err);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                        assert.ok(!err);
                                        assert.deepEqual(managers[0].principalId, mrvisser.user.id);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer give the good right to the target user
         */
        it('verify if transfer give good right', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate links
                    TransferTestUtil.generateLink(mrvisser.restContext, 'private', function(err, mrvisserlink) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvisserlink, function(err) {
                            assert.ok(!err);
                            AuthzAPI.hasRole(userTarget.user.id, mrvisserlink.id, 'manager', function(err, hasRole) {
                                assert.ok(!err);
                                assert.equal(hasRole, false);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, mrvisserlink.id, 'manager', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer update the right if the target user have less right than origin user
         */
        it('verify the case A transfer to B, A is a manager and B is a viewer : the role will be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate links
                    TransferTestUtil.generateLink(mrvisser.restContext, 'private', function(err, mrvisserlink) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvisserlink, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightContent(mrvisser, userTarget, 'viewer', mrvisserlink, function(err) {
                                assert.ok(!err);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, mrvisserlink.id, 'manager', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer do not update the right if the target user have more right than origin user
         */
        it('verify the case A transfer to B, A is a viewer and B is a manager : the role will not be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate links
                    TransferTestUtil.generateLink(userTarget.restContext, 'private', function(err, mrvisserlink) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(userTarget, userOrigin, 'viewer', mrvisserlink, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                assert.ok(transfer);
                                TransferTestUtil.assertMakeTransferFails(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, 400, function(err) {
                                    assert.ok(!err);
                                    // Verify the role
                                    AuthzAPI.hasRole(userTarget.user.id, mrvisserlink.id, 'manager', function(err, hasRole) {
                                        assert.equal(hasRole, true);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer put all the element on the library
         */
        it('verify if transfer works in all cases of a link', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, simong, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 3, function(err, users, stuartf, orodan, userTarget) {
                    assert.ok(!err);
                    // Generate links
                    TransferTestUtil.generateLinks(mrvisser.restContext, 'loggedin', function(err, mrvisserlink1, mrvisserlink2, mrvisserlink3) {
                        assert.ok(!err);
                        TransferTestUtil.generateLinks(stuartf.restContext, 'private', function(err, stuartflink1, stuartflink2, stuartflink3) {
                            assert.ok(!err);
                            TransferTestUtil.generateLinks(simong.restContext, 'public', function(err, simonglink1, simonglink2, simonglink3) {
                                assert.ok(!err);
                                TransferTestUtil.generateLinks(orodan.restContext, 'private', function(err, orodanlink1, orodanlink2, orodanlink3) {
                                    assert.ok(!err);
                                    TransferTestUtil.generateLinks(userOrigin.restContext, 'private', function(err, userOriginlink1, userOriginlink2, userOriginlink3) {
                                        assert.ok(!err);
                                        // Generate rights
                                        TransferTestUtil.generateRightContent(stuartf, userOrigin, 'viewer', stuartflink1, function(err) {
                                            assert.ok(!err);
                                            TransferTestUtil.generateRightContent(stuartf, userOrigin, 'manager', stuartflink2, function(err) {
                                                assert.ok(!err);
                                                TransferTestUtil.generateRightContent(simong, userOrigin, 'viewer', simonglink1, function(err) {
                                                    assert.ok(!err);
                                                    TransferTestUtil.generateRightContent(simong, userOrigin, 'manager', simonglink2, function(err) {
                                                        assert.ok(!err);
                                                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'viewer', mrvisserlink1, function(err) {
                                                            assert.ok(!err);
                                                            TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvisserlink2, function(err) {
                                                                assert.ok(!err);
                                                                TransferTestUtil.generateRightContent(orodan, userTarget, 'viewer', orodanlink1, function(err) {
                                                                    assert.ok(!err);
                                                                    TransferTestUtil.generateRightContent(orodan, userTarget, 'manager', orodanlink2, function(err) {
                                                                        assert.ok(!err);
                                                                        // Make list of link to compare
                                                                        RestAPI.Content.getLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                                                                            var listLinksBefore = [];
                                                                            result.results.forEach(function(i) {
                                                                                listLinksBefore.push(i.id);
                                                                            });
                                                                            RestAPI.Content.getLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                                                result.results.forEach(function(i) {
                                                                                    listLinksBefore.push(i.id);
                                                                                });
                                                                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                                                                    assert.ok(transfer);
                                                                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                                                                        assert.ok(!err);
                                                                                        //Verify that all links concerned by the trasnfer are in the library of userTarget
                                                                                        RestAPI.Content.getLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                                                                                            RestAPI.Content.getLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                                                                var listLinksTargetAfter = [];
                                                                                                result.results.forEach(function(i) {
                                                                                                    listLinksTargetAfter.push(i.id);
                                                                                                });
                                                                                                // Sort lists to compare
                                                                                                listLinksTargetAfter.sort();
                                                                                                listLinksBefore.sort();
                                                                                                // Compare links id
                                                                                                assert.deepEqual(listLinksTargetAfter, listLinksBefore);
                                                                                                return callback();
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Make transfer - files', function() {
        /**
         * Test that verify if transfer find the good manager
         */
        it('verify if transfer find good manager', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, stuartf, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate files
                    TransferTestUtil.generateFile(mrvisser.restContext, 'private', function(err, mrvisserfile) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvisserfile, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightContent(mrvisser, stuartf, 'viewer', mrvisserfile, function(err) {
                                assert.ok(!err);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                        assert.ok(!err);
                                        assert.deepEqual(managers[0].principalId, mrvisser.user.id);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer give the good right to the target user
         */
        it('verify if transfer give good right', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate files
                    TransferTestUtil.generateFile(mrvisser.restContext, 'private', function(err, mrvisserfile) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvisserfile, function(err) {
                            assert.ok(!err);
                            AuthzAPI.hasRole(userTarget.user.id, mrvisserfile.id, 'manager', function(err, hasRole) {
                                assert.ok(!err);
                                assert.equal(hasRole, false);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, mrvisserfile.id, 'manager', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer update the right if the target user have less right than origin user
         */
        it('verify the case A transfer to B, A is a manager and B is a viewer : the role will be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate files
                    TransferTestUtil.generateFile(mrvisser.restContext, 'private', function(err, mrvisserfile) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvisserfile, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightContent(mrvisser, userTarget, 'viewer', mrvisserfile, function(err) {
                                assert.ok(!err);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, mrvisserfile.id, 'manager', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer do not update the right if the target user have more right than origin user
         */
        it('verify the case A transfer to B, A is a viewer and B is a manager : the role will not be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate files
                    TransferTestUtil.generateFile(userTarget.restContext, 'private', function(err, mrvisserfile) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(userTarget, userOrigin, 'viewer', mrvisserfile, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                assert.ok(transfer);
                                TransferTestUtil.assertMakeTransferFails(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, 400, function(err) {
                                    assert.ok(!err);
                                    // Verify the role
                                    AuthzAPI.hasRole(userTarget.user.id, mrvisserfile.id, 'manager', function(err, hasRole) {
                                        assert.equal(hasRole, true);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer put all the element on the library
         */
        it('verify if transfer works in all cases of a files', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, simong, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 3, function(err, users, stuartf, orodan, userTarget) {
                    assert.ok(!err);
                    // Generate files
                    TransferTestUtil.generateFiles(mrvisser.restContext, 'loggedin', function(err, mrvisserfile1, mrvisserfile2, mrvisserfile3) {
                        assert.ok(!err);
                        TransferTestUtil.generateFiles(stuartf.restContext, 'private', function(err, stuartffile1, stuartffile2, stuartffile3) {
                            assert.ok(!err);
                            TransferTestUtil.generateFiles(simong.restContext, 'public', function(err, simongfile1, simongfile2, simongfile3) {
                                assert.ok(!err);
                                TransferTestUtil.generateFiles(orodan.restContext, 'private', function(err, orodanfile1, orodanfile2, orodanfile3) {
                                    assert.ok(!err);
                                    TransferTestUtil.generateFiles(userOrigin.restContext, 'private', function(err, userOriginfile1, userOriginfile2, userOriginfile3) {
                                        assert.ok(!err);
                                        // Generate rights
                                        TransferTestUtil.generateRightContent(stuartf, userOrigin, 'viewer', stuartffile1, function(err) {
                                            assert.ok(!err);
                                            TransferTestUtil.generateRightContent(stuartf, userOrigin, 'manager', stuartffile2, function(err) {
                                                assert.ok(!err);
                                                TransferTestUtil.generateRightContent(simong, userOrigin, 'viewer', simongfile1, function(err) {
                                                    assert.ok(!err);
                                                    TransferTestUtil.generateRightContent(simong, userOrigin, 'manager', simongfile2, function(err) {
                                                        assert.ok(!err);
                                                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'viewer', mrvisserfile1, function(err) {
                                                            assert.ok(!err);
                                                            TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvisserfile2, function(err) {
                                                                assert.ok(!err);
                                                                TransferTestUtil.generateRightContent(orodan, userTarget, 'viewer', orodanfile1, function(err) {
                                                                    assert.ok(!err);
                                                                    TransferTestUtil.generateRightContent(orodan, userTarget, 'manager', orodanfile2, function(err) {
                                                                        assert.ok(!err);
                                                                        // Make list of file to compare
                                                                        RestAPI.Content.getLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                                                                            var listFilesBefore = [];
                                                                            result.results.forEach(function(i) {
                                                                                listFilesBefore.push(i.id);
                                                                            });
                                                                            RestAPI.Content.getLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                                                result.results.forEach(function(i) {
                                                                                    listFilesBefore.push(i.id);
                                                                                });
                                                                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                                                                    assert.ok(transfer);
                                                                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                                                                        assert.ok(!err);
                                                                                        //Verify that all files concerned by the trasnfer are in the library of userTarget
                                                                                        RestAPI.Content.getLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                                                                                            RestAPI.Content.getLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                                                                var listFilesTargetAfter = [];
                                                                                                result.results.forEach(function(i) {
                                                                                                    listFilesTargetAfter.push(i.id);
                                                                                                });
                                                                                                // Sort lists to compare
                                                                                                listFilesTargetAfter.sort();
                                                                                                listFilesBefore.sort();
                                                                                                // Compare files id
                                                                                                assert.deepEqual(listFilesTargetAfter, listFilesBefore);
                                                                                                return callback();
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
 
    describe('Make transfer - collabdocs', function() {
        /**
         * Test that verify if transfer find the good manager
         */
        it('verify if transfer find good manager', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, stuartf, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate collabdocs
                    TransferTestUtil.generateCollabdoc(mrvisser.restContext, 'private', function(err, mrvissercollab) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvissercollab, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightContent(mrvisser, stuartf, 'viewer', mrvissercollab, function(err) {
                                assert.ok(!err);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                        assert.ok(!err);
                                        assert.deepEqual(managers[0].principalId, mrvisser.user.id);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer give the good right to the target user
         */
        it('verify if transfer give good right', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate collabdocs
                    TransferTestUtil.generateCollabdoc(mrvisser.restContext, 'private', function(err, mrvissercollab) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvissercollab, function(err) {
                            assert.ok(!err);
                            AuthzAPI.hasRole(userTarget.user.id, mrvissercollab.id, 'manager', function(err, hasRole) {
                                assert.ok(!err);
                                assert.equal(hasRole, false);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, mrvissercollab.id, 'manager', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer update the right if the target user have less right than origin user
         */
        it('verify the case A transfer to B, A is a manager and B is a viewer : the role will be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate collabdocs
                    TransferTestUtil.generateCollabdoc(mrvisser.restContext, 'private', function(err, mrvissercollab) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvissercollab, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightContent(mrvisser, userTarget, 'viewer', mrvissercollab, function(err) {
                                assert.ok(!err);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, mrvissercollab.id, 'manager', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer update the right if the target user have less right than origin user
         */
        it('verify the case A transfer to B, A is a manager and B is an editor : the role will be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate collabdocs
                    TransferTestUtil.generateCollabdoc(mrvisser.restContext, 'private', function(err, mrvissercollab) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvissercollab, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightContent(mrvisser, userTarget, 'editor', mrvissercollab, function(err) {
                                assert.ok(!err);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, mrvissercollab.id, 'manager', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer update the right if the target user have less right than origin user
         */
        it('verify the case A transfer to B, A is an editor and B is a viewer : the role will be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate collabdocs
                    TransferTestUtil.generateCollabdoc(mrvisser.restContext, 'private', function(err, mrvissercollab) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'editor', mrvissercollab, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightContent(mrvisser, userTarget, 'viewer', mrvissercollab, function(err) {
                                assert.ok(!err);
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err) {
                                        assert.ok(!err);
                                        // Verify the role
                                        AuthzAPI.hasRole(userTarget.user.id, mrvissercollab.id, 'editor', function(err, hasRole) {
                                            assert.equal(hasRole, true);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer do not update the right if the target user have more right than origin user
         */
        it('verify the case A transfer to B, A is a viewer and B is a manager : the role will not be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate collabdocs
                    TransferTestUtil.generateCollabdoc(userTarget.restContext, 'private', function(err, userTargetcollab) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(userTarget, userOrigin, 'viewer', userTargetcollab, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                assert.ok(transfer);
                                TransferTestUtil.assertMakeTransferFails(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, 400, function(err) {
                                    assert.ok(!err);
                                    // Verify the role
                                    AuthzAPI.hasRole(userTarget.user.id, userTargetcollab.id, 'manager', function(err, hasRole) {
                                        assert.equal(hasRole, true);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer do not update the right if the target user have more right than origin user
         */
        it('verify the case A transfer to B, A is an editor and B is a manager : the role will not be update', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, mrvisser, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    // Generate collabdocs
                    TransferTestUtil.generateCollabdoc(userTarget.restContext, 'private', function(err, userTargetcollab) {
                        assert.ok(!err);
                        // Generate rights
                        TransferTestUtil.generateRightContent(userTarget, userOrigin, 'editor', userTargetcollab, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                assert.ok(transfer);
                                TransferTestUtil.assertMakeTransferFails(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, 400, function(err) {
                                    assert.ok(!err);
                                    // Verify the role
                                    AuthzAPI.hasRole(userTarget.user.id, userTargetcollab.id, 'manager', function(err, hasRole) {
                                        assert.equal(hasRole, true);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer do not update the right if the target user have more right than origin user
         */
        it('HERE verify the case A transfer to B, A is an manager and C is an editor : C will become manager', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, orodan, userOrigin) {
                assert.ok(!err);

                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);

                    // Generate collabdocs
                    TransferTestUtil.generateCollabdocs(userOrigin.restContext, 'private', function(err, userOrigincollab1, userOrigincollab2, userOrigincollab3) {
                        assert.ok(!err);

                        // Generate rights
                        TransferTestUtil.generateRightContent(userOrigin, mrvisser, 'editor', userOrigincollab1, function(err) {
                            assert.ok(!err);
                            TransferTestUtil.generateRightContent(userOrigin, orodan, 'editor', userOrigincollab2, function(err) {
                                assert.ok(!err);
                                TransferTestUtil.generateRightContent(userOrigin, orodan, 'editor', userOrigincollab3, function(err) {
                                    assert.ok(!err);    

                                    // Create and run transfer
                                    TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                        assert.ok(transfer);
                                        TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                            assert.ok(!err);

                                            // Verify the role
                                            AuthzAPI.hasRole(mrvisser.user.id, userOrigincollab1.id, 'manager', function(err, hasRole) {
                                                assert.equal(hasRole, true);
                                                AuthzAPI.hasRole(orodan.user.id, userOrigincollab2.id, 'manager', function(err, hasRole) {
                                                    assert.equal(hasRole, true);
                                                    AuthzAPI.hasRole(orodan.user.id, userOrigincollab3.id, 'manager', function(err, hasRole) {
                                                        assert.equal(hasRole, true);
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer put all the element on the library
         */
        it('verify if transfer works in all cases of a collabdoc - Part 1', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 1, function(err, users, userTarget) {
                    assert.ok(!err);
                    TransferTestUtil.generateCollabdocs(userOrigin.restContext, 'private', function(err, userOrigincollab1, userOrigincollab2, userOrigincollab3) {
                        assert.ok(!err);
                        // Make list of link to compare
                        RestAPI.Content.getLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                            var listCollabsBefore = [];
                            result.results.forEach(function(i) {
                                listCollabsBefore.push(i.id);
                            });
                            RestAPI.Content.getLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                result.results.forEach(function(i) {
                                    listCollabsBefore.push(i.id);
                                });
                                TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                    assert.ok(transfer);
                                    TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                        assert.ok(!err);
                                        //Verify that all links concerned by the trasnfer are in the library of userTarget
                                        RestAPI.Content.getLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                                            RestAPI.Content.getLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                var listCollabsTargetAfter = [];
                                                result.results.forEach(function(i) {
                                                    listCollabsTargetAfter.push(i.id);
                                                });
                                                // Sort lists to compare
                                                listCollabsTargetAfter.sort();
                                                listCollabsBefore.sort();
                                                // Compare links id
                                                assert.deepEqual(listCollabsTargetAfter, listCollabsBefore);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verify if transfer put all the element on the library
         */
        it('verify if transfer works in all cases of a collabdoc - Part 2', function(callback) {
            // Generate user in cam tenant
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, mrvisser, simong, userOrigin) {
                assert.ok(!err);
                // Generate user in gt tenant
                TestsUtil.generateTestUsers(gtAdminRestContext, 3, function(err, users, stuartf, orodan, userTarget) {
                    assert.ok(!err);
                    // Generate docs
                    TransferTestUtil.generateCollabdocs(mrvisser.restContext, 'loggedin', function(err, mrvissercollab1, mrvissercollab2, mrvissercollab3) {
                        assert.ok(!err);
                        TransferTestUtil.generateCollabdocs(stuartf.restContext, 'private', function(err, stuartfcollab1, stuartfcollab2, stuartfcollab3) {
                            assert.ok(!err);
                            TransferTestUtil.generateCollabdocs(simong.restContext, 'public', function(err, simongcollab1, simongcollab2, simongcollab3) {
                                assert.ok(!err);
                                TransferTestUtil.generateCollabdocs(orodan.restContext, 'private', function(err, orodancollab1, orodancollab2, orodancollab3) {
                                    assert.ok(!err);
                                    // Generate rights
                                    TransferTestUtil.generateRightContent(stuartf, userOrigin, 'viewer', stuartfcollab1, function(err) {
                                        assert.ok(!err);
                                        TransferTestUtil.generateRightContent(stuartf, userOrigin, 'manager', stuartfcollab2, function(err) {
                                            assert.ok(!err);
                                            TransferTestUtil.generateRightContent(stuartf, userOrigin, 'editor', stuartfcollab3, function(err) {
                                                assert.ok(!err);
                                                TransferTestUtil.generateRightContent(simong, userOrigin, 'viewer', simongcollab1, function(err) {
                                                    assert.ok(!err);
                                                    TransferTestUtil.generateRightContent(simong, userOrigin, 'manager', simongcollab2, function(err) {
                                                        assert.ok(!err);
                                                        TransferTestUtil.generateRightContent(simong, userOrigin, 'editor', simongcollab3, function(err) {
                                                            assert.ok(!err);
                                                            TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'viewer', mrvissercollab1, function(err) {
                                                                assert.ok(!err);
                                                                TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'manager', mrvissercollab2, function(err) {
                                                                    assert.ok(!err);
                                                                    TransferTestUtil.generateRightContent(mrvisser, userOrigin, 'editor', mrvissercollab3, function(err) {
                                                                        assert.ok(!err);
                                                                        TransferTestUtil.generateRightContent(orodan, userTarget, 'viewer', orodancollab1, function(err) {
                                                                            assert.ok(!err);
                                                                            TransferTestUtil.generateRightContent(orodan, userTarget, 'manager', orodancollab2, function(err) {
                                                                                assert.ok(!err);
                                                                                TransferTestUtil.generateRightContent(orodan, userTarget, 'editor', orodancollab3, function(err) {
                                                                                    assert.ok(!err);                                                                                      
                                                                                    // Make list of link to compare
                                                                                    RestAPI.Content.getLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                                                                                        var listCollabsBefore = [];
                                                                                        result.results.forEach(function(i) {
                                                                                            listCollabsBefore.push(i.id);
                                                                                        });
                                                                                        RestAPI.Content.getLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                                                            result.results.forEach(function(i) {
                                                                                                listCollabsBefore.push(i.id);
                                                                                            });
                                                                                            TransferTestUtil.assertCreateTransferSucceeds(userOrigin.restContext, userOrigin.user.email, userTarget.user.email, userOrigin.user.id, function(transfer) {
                                                                                                assert.ok(transfer);
                                                                                                TransferTestUtil.assertMakeTransferSucceeds(userOrigin.restContext, userOrigin.user.email, transfer.code, userTarget.user.email, userTarget.user.id, function(err, managers) {
                                                                                                    assert.ok(!err);
                                                                                                    //Verify that all links concerned by the trasnfer are in the library of userTarget
                                                                                                    RestAPI.Content.getLibrary(userOrigin.restContext, userOrigin.user.id, null, null, function(err, result) {
                                                                                                        RestAPI.Content.getLibrary(userTarget.restContext, userTarget.user.id, null, null, function(err, result) {
                                                                                                            var listCollabsTargetAfter = [];
                                                                                                            result.results.forEach(function(i) {
                                                                                                                listCollabsTargetAfter.push(i.id);
                                                                                                            });
                                                                                                            // Sort lists to compare
                                                                                                            listCollabsTargetAfter.sort();
                                                                                                            listCollabsBefore.sort();
                                                                                                            // Compare links id
                                                                                                            assert.deepEqual(listCollabsTargetAfter, listCollabsBefore);
                                                                                                            return callback();
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });

});
